# Generated by Django 5.2.3 on 2025-06-16 12:25

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("booking", "0020_add_timezone_support"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        # Resource Responsible Model
        migrations.CreateModel(
            name='ResourceResponsible',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role_type', models.CharField(choices=[
                    ('primary', 'Primary Responsible'),
                    ('secondary', 'Secondary Responsible'),
                    ('trainer', 'Authorized Trainer'),
                    ('safety_officer', 'Safety Officer'),
                ], default='primary', max_length=50)),
                ('can_approve_access', models.BooleanField(default=True)),
                ('can_approve_training', models.BooleanField(default=True)),
                ('can_conduct_assessments', models.BooleanField(default=True)),
                ('assigned_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('notes', models.TextField(blank=True)),
                ('assigned_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assigned_responsibilities', to=settings.AUTH_USER_MODEL)),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='responsible_persons', to='booking.resource')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='responsible_resources', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'booking_resourceresponsible',
                'ordering': ['role_type', 'assigned_at'],
            },
        ),
        
        # Risk Assessment Model
        migrations.CreateModel(
            name='RiskAssessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('assessment_type', models.CharField(choices=[
                    ('general', 'General Risk Assessment'),
                    ('chemical', 'Chemical Hazard Assessment'),
                    ('biological', 'Biological Safety Assessment'),
                    ('radiation', 'Radiation Safety Assessment'),
                    ('mechanical', 'Mechanical Safety Assessment'),
                    ('electrical', 'Electrical Safety Assessment'),
                    ('fire', 'Fire Safety Assessment'),
                    ('environmental', 'Environmental Impact Assessment'),
                ], default='general', max_length=20)),
                ('description', models.TextField(help_text='Detailed description of the assessment')),
                ('risk_level', models.CharField(choices=[
                    ('low', 'Low Risk'),
                    ('medium', 'Medium Risk'),
                    ('high', 'High Risk'),
                    ('critical', 'Critical Risk'),
                ], default='medium', max_length=10)),
                ('hazards_identified', models.JSONField(default=list, help_text='List of identified hazards')),
                ('control_measures', models.JSONField(default=list, help_text='Control measures and mitigation steps')),
                ('emergency_procedures', models.TextField(blank=True, help_text='Emergency response procedures')),
                ('ppe_requirements', models.JSONField(default=list, help_text='Personal protective equipment requirements')),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('valid_until', models.DateField(help_text='Assessment expiry date')),
                ('review_frequency_months', models.PositiveIntegerField(default=12, help_text='Review frequency in months')),
                ('is_active', models.BooleanField(default=True)),
                ('is_mandatory', models.BooleanField(default=True, help_text='Must be completed before access')),
                ('requires_renewal', models.BooleanField(default=True, help_text='Requires periodic renewal')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_assessments', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_assessments', to=settings.AUTH_USER_MODEL)),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='risk_assessments', to='booking.resource')),
            ],
            options={
                'db_table': 'booking_riskassessment',
                'ordering': ['-created_at'],
            },
        ),
        
        # Training Course Model
        migrations.CreateModel(
            name='TrainingCourse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('code', models.CharField(help_text='Unique course code', max_length=50, unique=True)),
                ('description', models.TextField()),
                ('course_type', models.CharField(choices=[
                    ('induction', 'General Induction'),
                    ('safety', 'Safety Training'),
                    ('equipment', 'Equipment Specific Training'),
                    ('software', 'Software Training'),
                    ('advanced', 'Advanced Certification'),
                    ('refresher', 'Refresher Course'),
                ], default='equipment', max_length=20)),
                ('delivery_method', models.CharField(choices=[
                    ('in_person', 'In-Person Training'),
                    ('online', 'Online Training'),
                    ('hybrid', 'Hybrid Training'),
                    ('self_study', 'Self-Study'),
                    ('assessment_only', 'Assessment Only'),
                ], default='in_person', max_length=20)),
                ('duration_hours', models.DecimalField(decimal_places=1, help_text='Course duration in hours', max_digits=5)),
                ('max_participants', models.PositiveIntegerField(default=10, help_text='Maximum participants per session')),
                ('learning_objectives', models.JSONField(default=list, help_text='List of learning objectives')),
                ('course_materials', models.JSONField(default=list, help_text='Required materials and resources')),
                ('assessment_criteria', models.JSONField(default=list, help_text='Assessment criteria and methods')),
                ('valid_for_months', models.PositiveIntegerField(default=24, help_text='Certificate validity in months')),
                ('requires_practical_assessment', models.BooleanField(default=False)),
                ('pass_mark_percentage', models.DecimalField(decimal_places=2, default=80.00, max_digits=5)),
                ('is_active', models.BooleanField(default=True)),
                ('is_mandatory', models.BooleanField(default=False, help_text='Required for all users')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_courses', to=settings.AUTH_USER_MODEL)),
                ('instructors', models.ManyToManyField(blank=True, related_name='instructor_courses', to=settings.AUTH_USER_MODEL)),
                ('prerequisite_courses', models.ManyToManyField(blank=True, related_name='dependent_courses', to='booking.trainingcourse')),
            ],
            options={
                'db_table': 'booking_trainingcourse',
                'ordering': ['title'],
            },
        ),
        
        # Resource Training Requirement Model
        migrations.CreateModel(
            name='ResourceTrainingRequirement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_mandatory', models.BooleanField(default=True, help_text='Must be completed before access')),
                ('required_for_access_types', models.JSONField(default=list, help_text='Access types that require this training')),
                ('order', models.PositiveIntegerField(default=1, help_text='Order in which training should be completed')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='training_requirements', to='booking.resource')),
                ('training_course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resource_requirements', to='booking.trainingcourse')),
            ],
            options={
                'db_table': 'booking_resourcetrainingrequirement',
                'ordering': ['order', 'training_course__title'],
            },
        ),
        
        # User Risk Assessment Model
        migrations.CreateModel(
            name='UserRiskAssessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[
                    ('not_started', 'Not Started'),
                    ('in_progress', 'In Progress'),
                    ('submitted', 'Submitted for Review'),
                    ('approved', 'Approved'),
                    ('rejected', 'Rejected'),
                    ('expired', 'Expired'),
                ], default='not_started', max_length=20)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('submitted_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('responses', models.JSONField(default=dict, help_text='User responses to assessment questions')),
                ('assessor_notes', models.TextField(blank=True, help_text='Notes from the person reviewing the assessment')),
                ('user_declaration', models.TextField(blank=True, help_text='User declaration and acknowledgment')),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('review_notes', models.TextField(blank=True)),
                ('score_percentage', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('pass_threshold', models.DecimalField(decimal_places=2, default=80.00, max_digits=5)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_assessments', to=settings.AUTH_USER_MODEL)),
                ('risk_assessment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_completions', to='booking.riskassessment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='risk_assessments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'booking_userriskassessment',
                'ordering': ['-created_at'],
            },
        ),
        
        # User Training Model
        migrations.CreateModel(
            name='UserTraining',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[
                    ('enrolled', 'Enrolled'),
                    ('in_progress', 'In Progress'),
                    ('completed', 'Completed'),
                    ('failed', 'Failed'),
                    ('expired', 'Expired'),
                    ('cancelled', 'Cancelled'),
                ], default='enrolled', max_length=20)),
                ('enrolled_at', models.DateTimeField(auto_now_add=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('session_date', models.DateTimeField(blank=True, null=True)),
                ('session_location', models.CharField(blank=True, max_length=200)),
                ('theory_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('practical_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('overall_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('passed', models.BooleanField(default=False)),
                ('instructor_notes', models.TextField(blank=True)),
                ('user_feedback', models.TextField(blank=True)),
                ('certificate_number', models.CharField(blank=True, max_length=100, unique=True)),
                ('certificate_issued_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('instructor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='taught_training', to=settings.AUTH_USER_MODEL)),
                ('training_course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_completions', to='booking.trainingcourse')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='training_records', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'booking_usertraining',
                'ordering': ['-completed_at', '-enrolled_at'],
            },
        ),
        
        # Add unique constraints
        migrations.AlterUniqueTogether(
            name='resourceresponsible',
            unique_together={('resource', 'user', 'role_type')},
        ),
        migrations.AlterUniqueTogether(
            name='resourcetrainingrequirement',
            unique_together={('resource', 'training_course')},
        ),
        migrations.AlterUniqueTogether(
            name='userriskassessment',
            unique_together={('user', 'risk_assessment', 'status')},
        ),
        migrations.AlterUniqueTogether(
            name='usertraining',
            unique_together={('user', 'training_course', 'status')},
        ),
    ]
