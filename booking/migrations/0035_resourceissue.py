# Generated by Django 5.2.3 on 2025-07-03 21:16

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("booking", "0034_add_license_management"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="ResourceIssue",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Brief description of the issue", max_length=200
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Detailed description of the issue, including steps to reproduce if applicable"
                    ),
                ),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("low", "Low - Minor issue, resource still usable"),
                            ("medium", "Medium - Issue affects functionality"),
                            ("high", "High - Resource partially unusable"),
                            ("critical", "Critical - Resource completely unusable"),
                        ],
                        default="medium",
                        max_length=20,
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("mechanical", "Mechanical Issue"),
                            ("electrical", "Electrical Issue"),
                            ("software", "Software Issue"),
                            ("safety", "Safety Concern"),
                            ("calibration", "Calibration Required"),
                            ("maintenance", "Maintenance Required"),
                            ("damage", "Physical Damage"),
                            ("other", "Other"),
                        ],
                        default="other",
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("open", "Open"),
                            ("in_progress", "In Progress"),
                            ("waiting_parts", "Waiting for Parts"),
                            ("resolved", "Resolved"),
                            ("closed", "Closed"),
                            ("duplicate", "Duplicate"),
                        ],
                        default="open",
                        max_length=20,
                    ),
                ),
                (
                    "image",
                    models.ImageField(
                        blank=True,
                        help_text="Photo of the issue (optional)",
                        null=True,
                        upload_to="issue_reports/",
                    ),
                ),
                (
                    "specific_location",
                    models.CharField(
                        blank=True,
                        help_text="Specific part or area of the resource affected",
                        max_length=200,
                    ),
                ),
                (
                    "admin_notes",
                    models.TextField(
                        blank=True,
                        help_text="Internal notes for tracking resolution progress",
                    ),
                ),
                (
                    "resolution_description",
                    models.TextField(
                        blank=True,
                        help_text="Description of how the issue was resolved",
                    ),
                ),
                (
                    "estimated_repair_cost",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Estimated cost to repair (optional)",
                        max_digits=8,
                        null=True,
                    ),
                ),
                (
                    "actual_repair_cost",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Actual cost of repair (optional)",
                        max_digits=8,
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "resolved_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the issue was marked as resolved",
                        null=True,
                    ),
                ),
                (
                    "closed_at",
                    models.DateTimeField(
                        blank=True, help_text="When the issue was closed", null=True
                    ),
                ),
                (
                    "is_urgent",
                    models.BooleanField(
                        default=False, help_text="Requires immediate attention"
                    ),
                ),
                (
                    "blocks_resource_use",
                    models.BooleanField(
                        default=False,
                        help_text="This issue prevents the resource from being used",
                    ),
                ),
                (
                    "assigned_to",
                    models.ForeignKey(
                        blank=True,
                        help_text="Technician assigned to resolve this issue",
                        limit_choices_to={
                            "userprofile__role__in": ["technician", "sysadmin"]
                        },
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="assigned_issues",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "related_booking",
                    models.ForeignKey(
                        blank=True,
                        help_text="Booking during which this issue was discovered",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="reported_issues",
                        to="booking.booking",
                    ),
                ),
                (
                    "reported_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reported_issues",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "resource",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="issues",
                        to="booking.resource",
                    ),
                ),
            ],
            options={
                "verbose_name": "Resource Issue",
                "verbose_name_plural": "Resource Issues",
                "db_table": "booking_resourceissue",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["resource", "status"],
                        name="booking_res_resourc_685c84_idx",
                    ),
                    models.Index(
                        fields=["status", "-created_at"],
                        name="booking_res_status_c8fa3e_idx",
                    ),
                    models.Index(
                        fields=["severity", "-created_at"],
                        name="booking_res_severit_15a50f_idx",
                    ),
                    models.Index(
                        fields=["assigned_to", "status"],
                        name="booking_res_assigne_ec5a95_idx",
                    ),
                ],
            },
        ),
    ]
