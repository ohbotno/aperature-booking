# Generated by Django 5.2.3 on 2025-07-06 23:02

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="AboutPage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(default="About Our Lab", max_length=200)),
                (
                    "content",
                    models.TextField(
                        help_text="Main content for the about page. HTML is allowed."
                    ),
                ),
                ("facility_name", models.CharField(blank=True, max_length=200)),
                ("contact_email", models.EmailField(blank=True, max_length=254)),
                ("contact_phone", models.CharField(blank=True, max_length=50)),
                ("address", models.TextField(blank=True)),
                (
                    "operating_hours",
                    models.TextField(
                        blank=True, help_text="Describe your normal operating hours"
                    ),
                ),
                (
                    "policies_url",
                    models.URLField(
                        blank=True, help_text="Link to detailed policies document"
                    ),
                ),
                ("emergency_contact", models.CharField(blank=True, max_length=200)),
                (
                    "safety_information",
                    models.TextField(
                        blank=True,
                        help_text="Important safety information for lab users",
                    ),
                ),
                (
                    "image",
                    models.ImageField(
                        blank=True,
                        help_text="Optional image to display alongside the content",
                        null=True,
                        upload_to="about_page/",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Only one AboutPage can be active at a time",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "About Page",
                "verbose_name_plural": "About Pages",
                "db_table": "booking_aboutpage",
            },
        ),
        migrations.CreateModel(
            name="College",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("code", models.CharField(max_length=10)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "booking_college",
                "ordering": ["faculty__name", "name"],
            },
        ),
        migrations.CreateModel(
            name="EmailTemplate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                (
                    "notification_type",
                    models.CharField(
                        choices=[
                            ("booking_confirmed", "Booking Confirmed"),
                            ("booking_cancelled", "Booking Cancelled"),
                            ("booking_reminder", "Booking Reminder"),
                            ("booking_overridden", "Booking Overridden"),
                            ("approval_request", "Approval Request"),
                            ("approval_decision", "Approval Decision"),
                            ("maintenance_alert", "Maintenance Alert"),
                            ("conflict_detected", "Conflict Detected"),
                            ("quota_warning", "Quota Warning"),
                            ("waitlist_joined", "Joined Waiting List"),
                            ("waitlist_availability", "Waiting List Slot Available"),
                            ("waitlist_cancelled", "Left Waiting List"),
                            ("access_request_submitted", "Access Request Submitted"),
                            ("access_request_approved", "Access Request Approved"),
                            ("access_request_rejected", "Access Request Rejected"),
                            (
                                "training_request_submitted",
                                "Training Request Submitted",
                            ),
                            ("training_request_scheduled", "Training Scheduled"),
                            ("training_request_completed", "Training Completed"),
                            ("training_request_cancelled", "Training Cancelled"),
                        ],
                        max_length=30,
                    ),
                ),
                ("subject_template", models.CharField(max_length=200)),
                ("html_template", models.TextField()),
                ("text_template", models.TextField()),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "available_variables",
                    models.JSONField(
                        default=list, help_text="List of available template variables"
                    ),
                ),
            ],
            options={
                "db_table": "booking_emailtemplate",
            },
        ),
        migrations.CreateModel(
            name="Faculty",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200, unique=True)),
                ("code", models.CharField(max_length=10, unique=True)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name_plural": "Faculties",
                "db_table": "booking_faculty",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="LicenseConfiguration",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "license_key",
                    models.CharField(
                        help_text="Unique license key for this installation",
                        max_length=255,
                        unique=True,
                    ),
                ),
                (
                    "license_type",
                    models.CharField(
                        choices=[
                            ("open_source", "Open Source (GPL-3.0)"),
                            ("basic_commercial", "Basic Commercial White Label"),
                            ("premium_commercial", "Premium Commercial White Label"),
                            ("enterprise", "Enterprise License"),
                        ],
                        default="open_source",
                        max_length=50,
                    ),
                ),
                (
                    "organization_name",
                    models.CharField(
                        help_text="Name of the licensed organization", max_length=200
                    ),
                ),
                (
                    "organization_slug",
                    models.SlugField(
                        help_text="URL-safe identifier for custom theming",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "contact_email",
                    models.EmailField(
                        help_text="Primary contact for license holder", max_length=254
                    ),
                ),
                (
                    "allowed_domains",
                    models.JSONField(
                        default=list,
                        help_text="List of domains where this license is valid",
                    ),
                ),
                (
                    "max_users",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Maximum number of active users (null = unlimited)",
                        null=True,
                    ),
                ),
                (
                    "max_resources",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Maximum number of resources (null = unlimited)",
                        null=True,
                    ),
                ),
                (
                    "features_enabled",
                    models.JSONField(
                        default=dict,
                        help_text="JSON object defining which features are enabled",
                    ),
                ),
                ("issued_at", models.DateTimeField(auto_now_add=True)),
                (
                    "expires_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="License expiration date (null = no expiration)",
                        null=True,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this license is currently active",
                    ),
                ),
                (
                    "last_validation",
                    models.DateTimeField(
                        blank=True,
                        help_text="Last time license was validated",
                        null=True,
                    ),
                ),
                (
                    "validation_failures",
                    models.PositiveIntegerField(
                        default=0, help_text="Count of recent validation failures"
                    ),
                ),
                (
                    "support_expires_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Support and updates expiration date",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "License Configuration",
                "verbose_name_plural": "License Configurations",
                "db_table": "booking_licenseconfiguration",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="MaintenanceVendor",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("contact_person", models.CharField(blank=True, max_length=100)),
                ("email", models.EmailField(blank=True, max_length=254)),
                ("phone", models.CharField(blank=True, max_length=20)),
                ("address", models.TextField(blank=True)),
                ("website", models.URLField(blank=True)),
                (
                    "specialties",
                    models.JSONField(
                        default=list,
                        help_text="Areas of expertise (e.g., electrical, mechanical)",
                    ),
                ),
                (
                    "certifications",
                    models.JSONField(default=list, help_text="Relevant certifications"),
                ),
                (
                    "service_areas",
                    models.JSONField(
                        default=list, help_text="Geographic service areas"
                    ),
                ),
                (
                    "average_response_time",
                    models.DurationField(
                        blank=True,
                        help_text="Average response time for service calls",
                        null=True,
                    ),
                ),
                (
                    "rating",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Vendor rating (1-5)",
                        max_digits=3,
                        null=True,
                    ),
                ),
                (
                    "hourly_rate",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "emergency_rate",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                ("contract_start_date", models.DateField(blank=True, null=True)),
                ("contract_end_date", models.DateField(blank=True, null=True)),
                ("is_active", models.BooleanField(default=True)),
                ("notes", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "booking_maintenancevendor",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="PDFExportSettings",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Configuration name", max_length=100, unique=True
                    ),
                ),
                (
                    "is_default",
                    models.BooleanField(
                        default=False, help_text="Use as default configuration"
                    ),
                ),
                (
                    "default_quality",
                    models.CharField(
                        choices=[
                            ("high", "High Quality (2x scale)"),
                            ("medium", "Medium Quality (1.5x scale)"),
                            ("low", "Low Quality (1x scale)"),
                        ],
                        default="high",
                        max_length=10,
                    ),
                ),
                (
                    "default_orientation",
                    models.CharField(
                        choices=[("landscape", "Landscape"), ("portrait", "Portrait")],
                        default="landscape",
                        max_length=10,
                    ),
                ),
                (
                    "include_header",
                    models.BooleanField(
                        default=True, help_text="Include enhanced header"
                    ),
                ),
                (
                    "include_footer",
                    models.BooleanField(
                        default=True, help_text="Include enhanced footer"
                    ),
                ),
                (
                    "include_legend",
                    models.BooleanField(
                        default=True, help_text="Include status legend"
                    ),
                ),
                (
                    "include_details",
                    models.BooleanField(
                        default=True, help_text="Include booking details in footer"
                    ),
                ),
                (
                    "preserve_colors",
                    models.BooleanField(
                        default=True, help_text="Maintain booking status colors"
                    ),
                ),
                (
                    "multi_page_support",
                    models.BooleanField(
                        default=True, help_text="Split large calendars across pages"
                    ),
                ),
                (
                    "compress_pdf",
                    models.BooleanField(
                        default=False, help_text="Compress PDF (smaller file size)"
                    ),
                ),
                (
                    "header_logo_url",
                    models.URLField(
                        blank=True, help_text="URL to logo image for PDF header"
                    ),
                ),
                (
                    "custom_css",
                    models.TextField(blank=True, help_text="Custom CSS for PDF export"),
                ),
                (
                    "watermark_text",
                    models.CharField(
                        blank=True, help_text="Watermark text", max_length=100
                    ),
                ),
                (
                    "author_name",
                    models.CharField(
                        blank=True, help_text="Default author name", max_length=100
                    ),
                ),
                (
                    "organization_name",
                    models.CharField(
                        blank=True, help_text="Organization name", max_length=100
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "booking_pdfexportsettings",
                "ordering": ["-is_default", "name"],
            },
        ),
        migrations.CreateModel(
            name="Resource",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                (
                    "resource_type",
                    models.CharField(
                        choices=[
                            ("robot", "Robot"),
                            ("instrument", "Instrument"),
                            ("room", "Room"),
                            ("safety_cabinet", "Safety Cabinet"),
                            ("equipment", "Generic Equipment"),
                        ],
                        max_length=20,
                    ),
                ),
                ("description", models.TextField(blank=True)),
                ("location", models.CharField(max_length=200)),
                ("capacity", models.PositiveIntegerField(default=1)),
                ("required_training_level", models.PositiveIntegerField(default=1)),
                ("requires_induction", models.BooleanField(default=False)),
                (
                    "max_booking_hours",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "image",
                    models.ImageField(
                        blank=True,
                        help_text="Resource image",
                        null=True,
                        upload_to="resources/",
                    ),
                ),
                (
                    "requires_checkout_checklist",
                    models.BooleanField(
                        default=False,
                        help_text="Require users to complete a checklist before checking out",
                    ),
                ),
                (
                    "checkout_checklist_title",
                    models.CharField(
                        blank=True,
                        default="Pre-Checkout Safety Checklist",
                        help_text="Title displayed on the checkout checklist",
                        max_length=200,
                    ),
                ),
                (
                    "checkout_checklist_description",
                    models.TextField(
                        blank=True,
                        help_text="Instructions or description shown above the checklist",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "booking_resource",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="SystemSetting",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "key",
                    models.CharField(
                        help_text="Setting identifier", max_length=100, unique=True
                    ),
                ),
                ("value", models.TextField(help_text="Setting value (stored as text)")),
                (
                    "value_type",
                    models.CharField(
                        choices=[
                            ("string", "Text String"),
                            ("integer", "Integer"),
                            ("boolean", "True/False"),
                            ("json", "JSON Data"),
                            ("float", "Decimal Number"),
                        ],
                        default="string",
                        max_length=10,
                    ),
                ),
                (
                    "description",
                    models.TextField(help_text="What this setting controls"),
                ),
                (
                    "category",
                    models.CharField(
                        default="general", help_text="Setting category", max_length=50
                    ),
                ),
                (
                    "is_editable",
                    models.BooleanField(
                        default=True, help_text="Can be modified through admin"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "booking_systemsetting",
                "ordering": ["category", "key"],
            },
        ),
        migrations.CreateModel(
            name="TutorialCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("description", models.TextField(blank=True)),
                (
                    "icon",
                    models.CharField(default="fas fa-graduation-cap", max_length=50),
                ),
                ("order", models.PositiveIntegerField(default=0)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "Tutorial Category",
                "verbose_name_plural": "Tutorial Categories",
                "db_table": "booking_tutorialcategory",
                "ordering": ["order", "name"],
            },
        ),
        migrations.CreateModel(
            name="UpdateHistory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("from_version", models.CharField(max_length=50)),
                ("to_version", models.CharField(max_length=50)),
                (
                    "result",
                    models.CharField(
                        choices=[
                            ("success", "Successful"),
                            ("failed", "Failed"),
                            ("cancelled", "Cancelled"),
                        ],
                        max_length=20,
                    ),
                ),
                ("started_at", models.DateTimeField()),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("error_message", models.TextField(blank=True)),
                ("backup_created", models.BooleanField(default=False)),
                ("backup_path", models.CharField(blank=True, max_length=500)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "Update History",
                "verbose_name_plural": "Update History",
                "db_table": "booking_updatehistory",
                "ordering": ["-started_at"],
            },
        ),
        migrations.CreateModel(
            name="UpdateInfo",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "current_version",
                    models.CharField(
                        help_text="Currently installed version", max_length=50
                    ),
                ),
                (
                    "latest_version",
                    models.CharField(
                        blank=True, help_text="Latest available version", max_length=50
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("checking", "Checking for Updates"),
                            ("available", "Update Available"),
                            ("downloading", "Downloading Update"),
                            ("ready", "Ready to Install"),
                            ("installing", "Installing Update"),
                            ("completed", "Update Completed"),
                            ("failed", "Update Failed"),
                            ("up_to_date", "Up to Date"),
                        ],
                        default="up_to_date",
                        max_length=20,
                    ),
                ),
                (
                    "release_url",
                    models.URLField(blank=True, help_text="GitHub release URL"),
                ),
                (
                    "release_notes",
                    models.TextField(blank=True, help_text="Release notes/changelog"),
                ),
                ("release_date", models.DateTimeField(blank=True, null=True)),
                (
                    "download_url",
                    models.URLField(
                        blank=True, help_text="Download URL for the release"
                    ),
                ),
                ("last_check", models.DateTimeField(auto_now=True)),
                (
                    "download_progress",
                    models.IntegerField(
                        default=0, help_text="Download progress percentage"
                    ),
                ),
                (
                    "error_message",
                    models.TextField(
                        blank=True, help_text="Error message if update failed"
                    ),
                ),
                (
                    "auto_check_enabled",
                    models.BooleanField(
                        default=True, help_text="Automatically check for updates"
                    ),
                ),
                (
                    "github_repo",
                    models.CharField(
                        default="ohbotno/aperature-booking",
                        help_text="GitHub repository (username/repo-name)",
                        max_length=100,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Update Information",
                "verbose_name_plural": "Update Information",
                "db_table": "booking_updateinfo",
            },
        ),
        migrations.CreateModel(
            name="AccessRequest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "access_type",
                    models.CharField(
                        choices=[("view", "View Only"), ("book", "View and Book")],
                        default="book",
                        max_length=10,
                    ),
                ),
                (
                    "justification",
                    models.TextField(
                        help_text="Why do you need access to this resource?"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending Review"),
                            ("approved", "Approved"),
                            ("rejected", "Rejected"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        max_length=10,
                    ),
                ),
                ("reviewed_at", models.DateTimeField(blank=True, null=True)),
                ("review_notes", models.TextField(blank=True)),
                (
                    "requested_duration_days",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Requested access duration in days",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "reviewed_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="reviewed_access_requests",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="access_requests",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "resource",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="access_requests",
                        to="booking.resource",
                    ),
                ),
            ],
            options={
                "db_table": "booking_accessrequest",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="BackupSchedule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(default="Automated Backup", max_length=200)),
                ("enabled", models.BooleanField(default=True)),
                (
                    "frequency",
                    models.CharField(
                        choices=[
                            ("disabled", "Disabled"),
                            ("daily", "Daily"),
                            ("weekly", "Weekly"),
                            ("monthly", "Monthly"),
                        ],
                        default="weekly",
                        max_length=20,
                    ),
                ),
                (
                    "backup_time",
                    models.TimeField(
                        default="02:00",
                        help_text="Time of day to run backup (24-hour format)",
                    ),
                ),
                (
                    "day_of_week",
                    models.IntegerField(
                        choices=[
                            (0, "Monday"),
                            (1, "Tuesday"),
                            (2, "Wednesday"),
                            (3, "Thursday"),
                            (4, "Friday"),
                            (5, "Saturday"),
                            (6, "Sunday"),
                        ],
                        default=6,
                        help_text="Day of week for weekly backups",
                    ),
                ),
                (
                    "day_of_month",
                    models.IntegerField(
                        default=1, help_text="Day of month for monthly backups (1-28)"
                    ),
                ),
                (
                    "include_media",
                    models.BooleanField(
                        default=True,
                        help_text="Include media files in automated backups",
                    ),
                ),
                (
                    "include_database",
                    models.BooleanField(
                        default=True, help_text="Include database in automated backups"
                    ),
                ),
                (
                    "include_configuration",
                    models.BooleanField(
                        default=True,
                        help_text="Include configuration analysis in automated backups",
                    ),
                ),
                (
                    "max_backups_to_keep",
                    models.IntegerField(
                        default=7,
                        help_text="Maximum number of automated backups to keep (older ones will be deleted)",
                    ),
                ),
                (
                    "retention_days",
                    models.IntegerField(
                        default=30,
                        help_text="Days to keep automated backups before deletion",
                    ),
                ),
                ("last_run", models.DateTimeField(blank=True, null=True)),
                ("last_success", models.DateTimeField(blank=True, null=True)),
                ("last_backup_name", models.CharField(blank=True, max_length=255)),
                ("consecutive_failures", models.IntegerField(default=0)),
                ("total_runs", models.IntegerField(default=0)),
                ("total_successes", models.IntegerField(default=0)),
                ("last_error", models.TextField(blank=True)),
                (
                    "notification_email",
                    models.EmailField(
                        blank=True,
                        help_text="Email to notify on backup failures (leave blank to disable)",
                        max_length=254,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Backup Schedule",
                "verbose_name_plural": "Backup Schedules",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Booking",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                ("start_time", models.DateTimeField()),
                ("end_time", models.DateTimeField()),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending Approval"),
                            ("approved", "Approved"),
                            ("rejected", "Rejected"),
                            ("cancelled", "Cancelled"),
                            ("completed", "Completed"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("is_recurring", models.BooleanField(default=False)),
                ("recurring_pattern", models.JSONField(blank=True, null=True)),
                ("shared_with_group", models.BooleanField(default=False)),
                ("notes", models.TextField(blank=True)),
                (
                    "dependency_type",
                    models.CharField(
                        choices=[
                            ("sequential", "Sequential (must complete in order)"),
                            (
                                "parallel",
                                "Parallel (can run concurrently after prerequisites)",
                            ),
                            (
                                "conditional",
                                "Conditional (depends on outcome of prerequisites)",
                            ),
                        ],
                        default="sequential",
                        help_text="How this booking depends on prerequisites",
                        max_length=20,
                    ),
                ),
                (
                    "dependency_conditions",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional dependency conditions",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("approved_at", models.DateTimeField(blank=True, null=True)),
                (
                    "checked_in_at",
                    models.DateTimeField(
                        blank=True, help_text="When user actually checked in", null=True
                    ),
                ),
                (
                    "checked_out_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When user actually checked out",
                        null=True,
                    ),
                ),
                (
                    "actual_start_time",
                    models.DateTimeField(
                        blank=True, help_text="Actual usage start time", null=True
                    ),
                ),
                (
                    "actual_end_time",
                    models.DateTimeField(
                        blank=True, help_text="Actual usage end time", null=True
                    ),
                ),
                (
                    "no_show",
                    models.BooleanField(
                        default=False, help_text="User did not show up for booking"
                    ),
                ),
                (
                    "auto_checked_out",
                    models.BooleanField(
                        default=False, help_text="System automatically checked out user"
                    ),
                ),
                ("check_in_reminder_sent", models.BooleanField(default=False)),
                ("check_out_reminder_sent", models.BooleanField(default=False)),
                (
                    "approved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="approved_bookings",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "prerequisite_bookings",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Bookings that must be completed before this one",
                        related_name="dependent_bookings",
                        to="booking.booking",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="bookings",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "booking_booking",
                "ordering": ["start_time"],
            },
        ),
        migrations.CreateModel(
            name="BookingAttendee",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_primary", models.BooleanField(default=False)),
                ("added_at", models.DateTimeField(auto_now_add=True)),
                (
                    "booking",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="booking.booking",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "booking_bookingattendee",
                "unique_together": {("booking", "user")},
            },
        ),
        migrations.AddField(
            model_name="booking",
            name="attendees",
            field=models.ManyToManyField(
                related_name="attending_bookings",
                through="booking.BookingAttendee",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.CreateModel(
            name="BookingHistory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("action", models.CharField(max_length=50)),
                ("old_values", models.JSONField(blank=True, null=True)),
                ("new_values", models.JSONField(blank=True, null=True)),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("notes", models.TextField(blank=True)),
                (
                    "booking",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="history",
                        to="booking.booking",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "booking_bookinghistory",
                "ordering": ["-timestamp"],
            },
        ),
        migrations.CreateModel(
            name="BookingTemplate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                ("title_template", models.CharField(max_length=200)),
                ("description_template", models.TextField(blank=True)),
                ("duration_hours", models.PositiveIntegerField(default=1)),
                ("duration_minutes", models.PositiveIntegerField(default=0)),
                ("preferred_start_time", models.TimeField(blank=True, null=True)),
                ("shared_with_group", models.BooleanField(default=False)),
                ("notes_template", models.TextField(blank=True)),
                ("is_public", models.BooleanField(default=False)),
                ("use_count", models.PositiveIntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="booking_templates",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "resource",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="booking.resource",
                    ),
                ),
            ],
            options={
                "db_table": "booking_bookingtemplate",
                "ordering": ["-use_count", "name"],
            },
        ),
        migrations.AddField(
            model_name="booking",
            name="template_used",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="bookings_created",
                to="booking.bookingtemplate",
            ),
        ),
        migrations.CreateModel(
            name="ChecklistItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Question or instruction text", max_length=200
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Additional description or guidance"
                    ),
                ),
                (
                    "item_type",
                    models.CharField(
                        choices=[
                            ("checkbox", "Checkbox (Yes/No)"),
                            ("text", "Text Input"),
                            ("number", "Number Input"),
                            ("select", "Dropdown Selection"),
                            ("textarea", "Long Text"),
                        ],
                        default="checkbox",
                        max_length=20,
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("safety", "Safety Check"),
                            ("equipment", "Equipment Status"),
                            ("cleanliness", "Cleanliness"),
                            ("documentation", "Documentation"),
                            ("maintenance", "Maintenance Check"),
                            ("other", "Other"),
                        ],
                        default="other",
                        max_length=20,
                    ),
                ),
                (
                    "is_required",
                    models.BooleanField(
                        default=True, help_text="Must be completed to proceed"
                    ),
                ),
                (
                    "options",
                    models.JSONField(
                        blank=True,
                        help_text="JSON array of options for select items, e.g. ['Good', 'Needs Attention', 'Damaged']",
                        null=True,
                    ),
                ),
                (
                    "min_value",
                    models.FloatField(
                        blank=True,
                        help_text="Minimum value for number inputs",
                        null=True,
                    ),
                ),
                (
                    "max_value",
                    models.FloatField(
                        blank=True,
                        help_text="Maximum value for number inputs",
                        null=True,
                    ),
                ),
                (
                    "max_length",
                    models.IntegerField(
                        blank=True,
                        help_text="Maximum length for text inputs",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_checklist_items",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "booking_checklistitem",
                "ordering": ["category", "title"],
            },
        ),
        migrations.CreateModel(
            name="Department",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("code", models.CharField(max_length=10)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "college",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="departments",
                        to="booking.college",
                    ),
                ),
            ],
            options={
                "db_table": "booking_department",
                "ordering": ["college__faculty__name", "college__name", "name"],
                "unique_together": {("college", "code"), ("college", "name")},
            },
        ),
        migrations.CreateModel(
            name="EmailConfiguration",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=False,
                        help_text="Enable this configuration as the active email settings",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Descriptive name for this email configuration",
                        max_length=100,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Optional description of this configuration",
                    ),
                ),
                (
                    "email_backend",
                    models.CharField(
                        choices=[
                            (
                                "django.core.mail.backends.smtp.EmailBackend",
                                "SMTP Email Backend",
                            ),
                            (
                                "django.core.mail.backends.console.EmailBackend",
                                "Console Email Backend (Development)",
                            ),
                            (
                                "django.core.mail.backends.filebased.EmailBackend",
                                "File-based Email Backend (Testing)",
                            ),
                            (
                                "django.core.mail.backends.locmem.EmailBackend",
                                "In-memory Email Backend (Testing)",
                            ),
                            (
                                "django.core.mail.backends.dummy.EmailBackend",
                                "Dummy Email Backend (No emails sent)",
                            ),
                        ],
                        default="django.core.mail.backends.smtp.EmailBackend",
                        help_text="Django email backend to use",
                        max_length=100,
                    ),
                ),
                (
                    "email_host",
                    models.CharField(
                        help_text="SMTP server hostname (e.g., smtp.gmail.com)",
                        max_length=255,
                    ),
                ),
                (
                    "email_port",
                    models.PositiveIntegerField(
                        default=587,
                        help_text="SMTP server port (587 for TLS, 465 for SSL, 25 for standard)",
                    ),
                ),
                (
                    "email_use_tls",
                    models.BooleanField(
                        default=True,
                        help_text="Use TLS (Transport Layer Security) encryption",
                    ),
                ),
                (
                    "email_use_ssl",
                    models.BooleanField(
                        default=False,
                        help_text="Use SSL (Secure Sockets Layer) encryption",
                    ),
                ),
                (
                    "email_host_user",
                    models.CharField(
                        blank=True,
                        help_text="SMTP server username/email address",
                        max_length=255,
                    ),
                ),
                (
                    "email_host_password",
                    models.CharField(
                        blank=True,
                        help_text="SMTP server password (stored encrypted)",
                        max_length=255,
                    ),
                ),
                (
                    "default_from_email",
                    models.EmailField(
                        help_text="Default 'from' email address for outgoing emails",
                        max_length=254,
                    ),
                ),
                (
                    "server_email",
                    models.EmailField(
                        blank=True,
                        help_text="Email address used for error messages from Django",
                        max_length=254,
                    ),
                ),
                (
                    "email_timeout",
                    models.PositiveIntegerField(
                        default=10, help_text="Timeout in seconds for SMTP connections"
                    ),
                ),
                (
                    "email_file_path",
                    models.CharField(
                        blank=True,
                        help_text="Directory path for file-based email backend",
                        max_length=500,
                    ),
                ),
                (
                    "is_validated",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this configuration has been successfully tested",
                    ),
                ),
                (
                    "last_test_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="Last time this configuration was tested",
                        null=True,
                    ),
                ),
                (
                    "last_test_result",
                    models.TextField(
                        blank=True, help_text="Result of the last configuration test"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="User who created this configuration",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_email_configs",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Email Configuration",
                "verbose_name_plural": "Email Configurations",
                "ordering": ["-is_active", "-updated_at"],
            },
        ),
        migrations.CreateModel(
            name="EmailVerificationToken",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("token", models.UUIDField(default=uuid.uuid4, unique=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("is_used", models.BooleanField(default=False)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "booking_emailverificationtoken",
            },
        ),
        migrations.AddField(
            model_name="college",
            name="faculty",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="colleges",
                to="booking.faculty",
            ),
        ),
        migrations.CreateModel(
            name="BrandingConfiguration",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "app_title",
                    models.CharField(
                        default="Aperature Booking",
                        help_text="Application name shown in browser title and headers",
                        max_length=100,
                    ),
                ),
                (
                    "company_name",
                    models.CharField(
                        help_text="Company/organization name", max_length=200
                    ),
                ),
                (
                    "logo_primary",
                    models.ImageField(
                        blank=True,
                        help_text="Primary logo (displayed in header)",
                        null=True,
                        upload_to="branding/logos/",
                    ),
                ),
                (
                    "logo_favicon",
                    models.ImageField(
                        blank=True,
                        help_text="Favicon (16x16 or 32x32 pixels)",
                        null=True,
                        upload_to="branding/favicons/",
                    ),
                ),
                (
                    "color_primary",
                    models.CharField(
                        default="#007bff",
                        help_text="Primary brand color (hex format)",
                        max_length=7,
                    ),
                ),
                (
                    "color_secondary",
                    models.CharField(
                        default="#6c757d",
                        help_text="Secondary brand color (hex format)",
                        max_length=7,
                    ),
                ),
                (
                    "color_accent",
                    models.CharField(
                        default="#28a745",
                        help_text="Accent color for highlights and buttons",
                        max_length=7,
                    ),
                ),
                (
                    "welcome_message",
                    models.TextField(
                        blank=True, help_text="Custom welcome message for the homepage"
                    ),
                ),
                (
                    "footer_text",
                    models.TextField(blank=True, help_text="Custom footer text"),
                ),
                (
                    "custom_css",
                    models.TextField(
                        blank=True, help_text="Additional CSS for custom styling"
                    ),
                ),
                (
                    "support_email",
                    models.EmailField(
                        blank=True, help_text="Support contact email", max_length=254
                    ),
                ),
                (
                    "support_phone",
                    models.CharField(
                        blank=True, help_text="Support contact phone", max_length=50
                    ),
                ),
                (
                    "website_url",
                    models.URLField(blank=True, help_text="Organization website URL"),
                ),
                (
                    "email_from_name",
                    models.CharField(
                        blank=True,
                        help_text="Name shown in 'From' field of emails",
                        max_length=100,
                    ),
                ),
                (
                    "email_signature",
                    models.TextField(
                        blank=True, help_text="Signature added to notification emails"
                    ),
                ),
                (
                    "show_powered_by",
                    models.BooleanField(
                        default=True,
                        help_text="Show 'Powered by Aperature Booking' in footer",
                    ),
                ),
                (
                    "enable_public_registration",
                    models.BooleanField(
                        default=True, help_text="Allow public user registration"
                    ),
                ),
                (
                    "enable_guest_booking",
                    models.BooleanField(
                        default=False,
                        help_text="Allow guest bookings without registration",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "license",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="branding",
                        to="booking.licenseconfiguration",
                    ),
                ),
            ],
            options={
                "verbose_name": "Branding Configuration",
                "verbose_name_plural": "Branding Configurations",
                "db_table": "booking_brandingconfiguration",
            },
        ),
        migrations.CreateModel(
            name="Maintenance",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                ("start_time", models.DateTimeField()),
                ("end_time", models.DateTimeField()),
                (
                    "maintenance_type",
                    models.CharField(
                        choices=[
                            ("preventive", "Preventive Maintenance"),
                            ("corrective", "Corrective Maintenance"),
                            ("emergency", "Emergency Repair"),
                            ("calibration", "Calibration"),
                            ("inspection", "Inspection"),
                            ("upgrade", "Upgrade"),
                            ("installation", "Installation"),
                            ("decommission", "Decommission"),
                        ],
                        default="preventive",
                        max_length=20,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("critical", "Critical"),
                            ("emergency", "Emergency"),
                        ],
                        default="medium",
                        max_length=10,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("scheduled", "Scheduled"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                            ("postponed", "Postponed"),
                            ("overdue", "Overdue"),
                        ],
                        default="scheduled",
                        max_length=20,
                    ),
                ),
                (
                    "is_internal",
                    models.BooleanField(
                        default=True, help_text="Performed by internal staff"
                    ),
                ),
                (
                    "estimated_cost",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "actual_cost",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "labor_hours",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=8, null=True
                    ),
                ),
                (
                    "parts_cost",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                ("is_recurring", models.BooleanField(default=False)),
                ("recurring_pattern", models.JSONField(blank=True, null=True)),
                (
                    "next_maintenance_date",
                    models.DateTimeField(
                        blank=True, help_text="When next maintenance is due", null=True
                    ),
                ),
                ("blocks_booking", models.BooleanField(default=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("completion_notes", models.TextField(blank=True)),
                ("issues_found", models.TextField(blank=True)),
                ("recommendations", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "approved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="approved_maintenances",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "assigned_to",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="assigned_maintenances",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_maintenances",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "prerequisite_maintenances",
                    models.ManyToManyField(
                        blank=True,
                        related_name="dependent_maintenances",
                        to="booking.maintenance",
                    ),
                ),
                (
                    "vendor",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="maintenances",
                        to="booking.maintenancevendor",
                    ),
                ),
                (
                    "affects_other_resources",
                    models.ManyToManyField(
                        blank=True,
                        related_name="affected_by_maintenance",
                        to="booking.resource",
                    ),
                ),
                (
                    "resource",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="maintenances",
                        to="booking.resource",
                    ),
                ),
            ],
            options={
                "db_table": "booking_maintenance",
                "ordering": ["start_time"],
            },
        ),
        migrations.CreateModel(
            name="MaintenanceDocument",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                (
                    "document_type",
                    models.CharField(
                        choices=[
                            ("manual", "Service Manual"),
                            ("checklist", "Maintenance Checklist"),
                            ("invoice", "Invoice/Receipt"),
                            ("report", "Maintenance Report"),
                            ("photo", "Photograph"),
                            ("certificate", "Certificate"),
                            ("warranty", "Warranty Document"),
                            ("other", "Other"),
                        ],
                        default="other",
                        max_length=50,
                    ),
                ),
                ("file", models.FileField(upload_to="maintenance_docs/%Y/%m/")),
                (
                    "file_size",
                    models.PositiveIntegerField(
                        blank=True, help_text="File size in bytes", null=True
                    ),
                ),
                ("uploaded_at", models.DateTimeField(auto_now_add=True)),
                (
                    "tags",
                    models.JSONField(default=list, help_text="Tags for categorization"),
                ),
                (
                    "is_public",
                    models.BooleanField(
                        default=False, help_text="Viewable by all users"
                    ),
                ),
                (
                    "version",
                    models.CharField(
                        blank=True, help_text="Document version", max_length=20
                    ),
                ),
                (
                    "maintenance",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="documents",
                        to="booking.maintenance",
                    ),
                ),
                (
                    "uploaded_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "booking_maintenancedocument",
                "ordering": ["-uploaded_at"],
            },
        ),
        migrations.CreateModel(
            name="PasswordResetToken",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("token", models.UUIDField(default=uuid.uuid4, unique=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("is_used", models.BooleanField(default=False)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "booking_passwordresettoken",
            },
        ),
        migrations.CreateModel(
            name="MaintenanceAnalytics",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "total_maintenance_cost",
                    models.DecimalField(decimal_places=2, default=0, max_digits=15),
                ),
                (
                    "average_maintenance_cost",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                (
                    "preventive_cost_ratio",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Percentage of costs from preventive maintenance",
                        max_digits=5,
                    ),
                ),
                (
                    "total_downtime_hours",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                ("average_repair_time", models.DurationField(blank=True, null=True)),
                (
                    "planned_vs_unplanned_ratio",
                    models.DecimalField(decimal_places=2, default=0, max_digits=5),
                ),
                ("total_maintenance_count", models.PositiveIntegerField(default=0)),
                (
                    "preventive_maintenance_count",
                    models.PositiveIntegerField(default=0),
                ),
                (
                    "corrective_maintenance_count",
                    models.PositiveIntegerField(default=0),
                ),
                ("emergency_maintenance_count", models.PositiveIntegerField(default=0)),
                (
                    "first_time_fix_rate",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Percentage of issues fixed on first attempt",
                        max_digits=5,
                    ),
                ),
                (
                    "mean_time_between_failures",
                    models.DurationField(blank=True, null=True),
                ),
                ("mean_time_to_repair", models.DurationField(blank=True, null=True)),
                (
                    "vendor_performance_score",
                    models.DecimalField(decimal_places=2, default=0, max_digits=5),
                ),
                (
                    "external_maintenance_ratio",
                    models.DecimalField(decimal_places=2, default=0, max_digits=5),
                ),
                (
                    "next_failure_prediction",
                    models.DateTimeField(blank=True, null=True),
                ),
                (
                    "failure_probability",
                    models.DecimalField(decimal_places=2, default=0, max_digits=5),
                ),
                (
                    "recommended_maintenance_interval",
                    models.DurationField(blank=True, null=True),
                ),
                ("last_calculated", models.DateTimeField(auto_now=True)),
                (
                    "resource",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="maintenance_analytics",
                        to="booking.resource",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Maintenance Analytics",
                "db_table": "booking_maintenanceanalytics",
            },
        ),
        migrations.AddField(
            model_name="booking",
            name="resource",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="bookings",
                to="booking.resource",
            ),
        ),
        migrations.CreateModel(
            name="ApprovalStatistics",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("period_start", models.DateField()),
                ("period_end", models.DateField()),
                (
                    "period_type",
                    models.CharField(
                        choices=[
                            ("daily", "Daily"),
                            ("weekly", "Weekly"),
                            ("monthly", "Monthly"),
                            ("quarterly", "Quarterly"),
                            ("yearly", "Yearly"),
                        ],
                        default="monthly",
                        max_length=20,
                    ),
                ),
                ("access_requests_received", models.IntegerField(default=0)),
                ("access_requests_approved", models.IntegerField(default=0)),
                ("access_requests_rejected", models.IntegerField(default=0)),
                ("access_requests_pending", models.IntegerField(default=0)),
                ("training_requests_received", models.IntegerField(default=0)),
                ("training_sessions_conducted", models.IntegerField(default=0)),
                ("training_completions", models.IntegerField(default=0)),
                ("training_failures", models.IntegerField(default=0)),
                ("assessments_created", models.IntegerField(default=0)),
                ("assessments_reviewed", models.IntegerField(default=0)),
                ("assessments_approved", models.IntegerField(default=0)),
                ("assessments_rejected", models.IntegerField(default=0)),
                ("avg_response_time_hours", models.FloatField(default=0.0)),
                ("min_response_time_hours", models.FloatField(default=0.0)),
                ("max_response_time_hours", models.FloatField(default=0.0)),
                ("overdue_items", models.IntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "approver",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="approval_stats",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "resource",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="approval_stats",
                        to="booking.resource",
                    ),
                ),
            ],
            options={
                "db_table": "booking_approvalstatistics",
                "ordering": ["-period_start", "resource", "approver"],
            },
        ),
        migrations.CreateModel(
            name="ApprovalRule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                (
                    "approval_type",
                    models.CharField(
                        choices=[
                            ("auto", "Automatic Approval"),
                            ("single", "Single Level Approval"),
                            ("tiered", "Tiered Approval"),
                            ("quota", "Quota Based"),
                            ("conditional", "Conditional Approval"),
                        ],
                        max_length=20,
                    ),
                ),
                ("user_roles", models.JSONField(default=list)),
                ("conditions", models.JSONField(default=dict)),
                (
                    "condition_type",
                    models.CharField(
                        choices=[
                            ("time_based", "Time-Based Conditions"),
                            ("usage_based", "Usage-Based Conditions"),
                            ("training_based", "Training-Based Conditions"),
                            ("role_based", "Role-Based Conditions"),
                            ("resource_based", "Resource-Based Conditions"),
                            ("custom", "Custom Logic"),
                        ],
                        default="role_based",
                        max_length=20,
                    ),
                ),
                (
                    "conditional_logic",
                    models.JSONField(
                        default=dict, help_text="Advanced conditional rules"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("priority", models.PositiveIntegerField(default=1)),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Detailed description of when this rule applies",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "approvers",
                    models.ManyToManyField(
                        blank=True,
                        related_name="approval_rules",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "fallback_rule",
                    models.ForeignKey(
                        blank=True,
                        help_text="Rule to apply if conditions not met",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="booking.approvalrule",
                    ),
                ),
                (
                    "resource",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="approval_rules",
                        to="booking.resource",
                    ),
                ),
            ],
            options={
                "db_table": "booking_approvalrule",
                "ordering": ["priority", "name"],
            },
        ),
        migrations.CreateModel(
            name="ResourceAccess",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "access_type",
                    models.CharField(
                        choices=[
                            ("view", "View Only"),
                            ("book", "View and Book"),
                            ("manage", "Full Management"),
                        ],
                        default="book",
                        max_length=10,
                    ),
                ),
                ("granted_at", models.DateTimeField(auto_now_add=True)),
                ("is_active", models.BooleanField(default=True)),
                ("notes", models.TextField(blank=True)),
                (
                    "expires_at",
                    models.DateTimeField(
                        blank=True, help_text="Optional expiration date", null=True
                    ),
                ),
                (
                    "granted_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="granted_access",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "resource",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="access_permissions",
                        to="booking.resource",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="resource_access",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "booking_resourceaccess",
                "ordering": ["-granted_at"],
            },
        ),
        migrations.CreateModel(
            name="ResourceChecklistItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "order",
                    models.PositiveIntegerField(
                        default=0, help_text="Display order (lower numbers first)"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Include this item in the checklist"
                    ),
                ),
                (
                    "override_required",
                    models.BooleanField(
                        default=False,
                        help_text="Override the default required setting for this resource",
                    ),
                ),
                (
                    "is_required_override",
                    models.BooleanField(
                        default=True,
                        help_text="Required setting when override is enabled",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "checklist_item",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="resource_assignments",
                        to="booking.checklistitem",
                    ),
                ),
                (
                    "resource",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="checklist_items",
                        to="booking.resource",
                    ),
                ),
            ],
            options={
                "db_table": "booking_resourcechecklistitem",
                "ordering": [
                    "order",
                    "checklist_item__category",
                    "checklist_item__title",
                ],
            },
        ),
        migrations.CreateModel(
            name="ResourceIssue",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Brief description of the issue", max_length=200
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Detailed description of the issue, including steps to reproduce if applicable"
                    ),
                ),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("low", "Low - Minor issue, resource still usable"),
                            ("medium", "Medium - Issue affects functionality"),
                            ("high", "High - Resource partially unusable"),
                            ("critical", "Critical - Resource completely unusable"),
                        ],
                        default="medium",
                        max_length=20,
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("mechanical", "Mechanical Issue"),
                            ("electrical", "Electrical Issue"),
                            ("software", "Software Issue"),
                            ("safety", "Safety Concern"),
                            ("calibration", "Calibration Required"),
                            ("maintenance", "Maintenance Required"),
                            ("damage", "Physical Damage"),
                            ("other", "Other"),
                        ],
                        default="other",
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("open", "Open"),
                            ("in_progress", "In Progress"),
                            ("waiting_parts", "Waiting for Parts"),
                            ("resolved", "Resolved"),
                            ("closed", "Closed"),
                            ("duplicate", "Duplicate"),
                        ],
                        default="open",
                        max_length=20,
                    ),
                ),
                (
                    "image",
                    models.ImageField(
                        blank=True,
                        help_text="Photo of the issue (optional)",
                        null=True,
                        upload_to="issue_reports/",
                    ),
                ),
                (
                    "specific_location",
                    models.CharField(
                        blank=True,
                        help_text="Specific part or area of the resource affected",
                        max_length=200,
                    ),
                ),
                (
                    "admin_notes",
                    models.TextField(
                        blank=True,
                        help_text="Internal notes for tracking resolution progress",
                    ),
                ),
                (
                    "resolution_description",
                    models.TextField(
                        blank=True,
                        help_text="Description of how the issue was resolved",
                    ),
                ),
                (
                    "estimated_repair_cost",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Estimated cost to repair (optional)",
                        max_digits=8,
                        null=True,
                    ),
                ),
                (
                    "actual_repair_cost",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Actual cost of repair (optional)",
                        max_digits=8,
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "resolved_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the issue was marked as resolved",
                        null=True,
                    ),
                ),
                (
                    "closed_at",
                    models.DateTimeField(
                        blank=True, help_text="When the issue was closed", null=True
                    ),
                ),
                (
                    "is_urgent",
                    models.BooleanField(
                        default=False, help_text="Requires immediate attention"
                    ),
                ),
                (
                    "blocks_resource_use",
                    models.BooleanField(
                        default=False,
                        help_text="This issue prevents the resource from being used",
                    ),
                ),
                (
                    "assigned_to",
                    models.ForeignKey(
                        blank=True,
                        help_text="Technician assigned to resolve this issue",
                        limit_choices_to={
                            "userprofile__role__in": ["technician", "sysadmin"]
                        },
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="assigned_issues",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "related_booking",
                    models.ForeignKey(
                        blank=True,
                        help_text="Booking during which this issue was discovered",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="reported_issues",
                        to="booking.booking",
                    ),
                ),
                (
                    "reported_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reported_issues",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "resource",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="issues",
                        to="booking.resource",
                    ),
                ),
            ],
            options={
                "verbose_name": "Resource Issue",
                "verbose_name_plural": "Resource Issues",
                "db_table": "booking_resourceissue",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ResourceResponsible",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "role_type",
                    models.CharField(
                        choices=[
                            ("primary", "Primary Responsible"),
                            ("secondary", "Secondary Responsible"),
                            ("trainer", "Authorized Trainer"),
                            ("safety_officer", "Safety Officer"),
                        ],
                        default="primary",
                        max_length=50,
                    ),
                ),
                ("can_approve_access", models.BooleanField(default=True)),
                ("can_approve_training", models.BooleanField(default=True)),
                ("can_conduct_assessments", models.BooleanField(default=True)),
                ("assigned_at", models.DateTimeField(auto_now_add=True)),
                ("is_active", models.BooleanField(default=True)),
                ("notes", models.TextField(blank=True)),
                (
                    "assigned_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="assigned_responsibilities",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "resource",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="responsible_persons",
                        to="booking.resource",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="responsible_resources",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "booking_resourceresponsible",
                "ordering": ["role_type", "assigned_at"],
            },
        ),
        migrations.CreateModel(
            name="RiskAssessment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                (
                    "assessment_type",
                    models.CharField(
                        choices=[
                            ("general", "General Risk Assessment"),
                            ("chemical", "Chemical Hazard Assessment"),
                            ("biological", "Biological Safety Assessment"),
                            ("radiation", "Radiation Safety Assessment"),
                            ("mechanical", "Mechanical Safety Assessment"),
                            ("electrical", "Electrical Safety Assessment"),
                            ("fire", "Fire Safety Assessment"),
                            ("environmental", "Environmental Impact Assessment"),
                        ],
                        default="general",
                        max_length=20,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Detailed description of the assessment"
                    ),
                ),
                (
                    "risk_level",
                    models.CharField(
                        choices=[
                            ("low", "Low Risk"),
                            ("medium", "Medium Risk"),
                            ("high", "High Risk"),
                            ("critical", "Critical Risk"),
                        ],
                        default="medium",
                        max_length=10,
                    ),
                ),
                (
                    "hazards_identified",
                    models.JSONField(
                        default=list, help_text="List of identified hazards"
                    ),
                ),
                (
                    "control_measures",
                    models.JSONField(
                        default=list, help_text="Control measures and mitigation steps"
                    ),
                ),
                (
                    "emergency_procedures",
                    models.TextField(
                        blank=True, help_text="Emergency response procedures"
                    ),
                ),
                (
                    "ppe_requirements",
                    models.JSONField(
                        default=list,
                        help_text="Personal protective equipment requirements",
                    ),
                ),
                ("approved_at", models.DateTimeField(blank=True, null=True)),
                ("valid_until", models.DateField(help_text="Assessment expiry date")),
                (
                    "review_frequency_months",
                    models.PositiveIntegerField(
                        default=12, help_text="Review frequency in months"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "is_mandatory",
                    models.BooleanField(
                        default=True, help_text="Must be completed before access"
                    ),
                ),
                (
                    "requires_renewal",
                    models.BooleanField(
                        default=True, help_text="Requires periodic renewal"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "approved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="approved_assessments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_assessments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "resource",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="risk_assessments",
                        to="booking.resource",
                    ),
                ),
            ],
            options={
                "db_table": "booking_riskassessment",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="TrainingCourse",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                (
                    "code",
                    models.CharField(
                        help_text="Unique course code", max_length=50, unique=True
                    ),
                ),
                ("description", models.TextField()),
                (
                    "course_type",
                    models.CharField(
                        choices=[
                            ("induction", "General Induction"),
                            ("safety", "Safety Training"),
                            ("equipment", "Equipment Specific Training"),
                            ("software", "Software Training"),
                            ("advanced", "Advanced Certification"),
                            ("refresher", "Refresher Course"),
                        ],
                        default="equipment",
                        max_length=20,
                    ),
                ),
                (
                    "delivery_method",
                    models.CharField(
                        choices=[
                            ("in_person", "In-Person Training"),
                            ("online", "Online Training"),
                            ("hybrid", "Hybrid Training"),
                            ("self_study", "Self-Study"),
                            ("assessment_only", "Assessment Only"),
                        ],
                        default="in_person",
                        max_length=20,
                    ),
                ),
                (
                    "duration_hours",
                    models.DecimalField(
                        decimal_places=1,
                        help_text="Course duration in hours",
                        max_digits=5,
                    ),
                ),
                (
                    "max_participants",
                    models.PositiveIntegerField(
                        default=10, help_text="Maximum participants per session"
                    ),
                ),
                (
                    "learning_objectives",
                    models.JSONField(
                        default=list, help_text="List of learning objectives"
                    ),
                ),
                (
                    "course_materials",
                    models.JSONField(
                        default=list, help_text="Required materials and resources"
                    ),
                ),
                (
                    "assessment_criteria",
                    models.JSONField(
                        default=list, help_text="Assessment criteria and methods"
                    ),
                ),
                (
                    "valid_for_months",
                    models.PositiveIntegerField(
                        default=24, help_text="Certificate validity in months"
                    ),
                ),
                ("requires_practical_assessment", models.BooleanField(default=False)),
                (
                    "pass_mark_percentage",
                    models.DecimalField(decimal_places=2, default=80.0, max_digits=5),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "is_mandatory",
                    models.BooleanField(
                        default=False, help_text="Required for all users"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_courses",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "instructors",
                    models.ManyToManyField(
                        blank=True,
                        related_name="instructor_courses",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "prerequisite_courses",
                    models.ManyToManyField(
                        blank=True,
                        related_name="dependent_courses",
                        to="booking.trainingcourse",
                    ),
                ),
            ],
            options={
                "db_table": "booking_trainingcourse",
                "ordering": ["title"],
            },
        ),
        migrations.CreateModel(
            name="ResourceTrainingRequirement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "is_mandatory",
                    models.BooleanField(
                        default=True, help_text="Must be completed before access"
                    ),
                ),
                (
                    "required_for_access_types",
                    models.JSONField(
                        default=list,
                        help_text="Access types that require this training",
                    ),
                ),
                (
                    "order",
                    models.PositiveIntegerField(
                        default=1,
                        help_text="Order in which training should be completed",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "resource",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="training_requirements",
                        to="booking.resource",
                    ),
                ),
                (
                    "training_course",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="resource_requirements",
                        to="booking.trainingcourse",
                    ),
                ),
            ],
            options={
                "db_table": "booking_resourcetrainingrequirement",
                "ordering": ["order", "training_course__title"],
            },
        ),
        migrations.CreateModel(
            name="TrainingRequest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "requested_level",
                    models.PositiveIntegerField(
                        help_text="Training level being requested"
                    ),
                ),
                (
                    "current_level",
                    models.PositiveIntegerField(
                        help_text="User's current training level"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Training Pending"),
                            ("scheduled", "Training Scheduled"),
                            ("completed", "Training Completed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        max_length=10,
                    ),
                ),
                ("justification", models.TextField(help_text="Why training is needed")),
                (
                    "training_date",
                    models.DateTimeField(
                        blank=True, help_text="Scheduled training date", null=True
                    ),
                ),
                (
                    "completed_date",
                    models.DateTimeField(
                        blank=True, help_text="When training was completed", null=True
                    ),
                ),
                ("reviewed_at", models.DateTimeField(blank=True, null=True)),
                ("review_notes", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "resource",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="training_requests",
                        to="booking.resource",
                    ),
                ),
                (
                    "reviewed_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="reviewed_training_requests",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="training_requests",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "booking_trainingrequest",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Notification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "notification_type",
                    models.CharField(
                        choices=[
                            ("booking_confirmed", "Booking Confirmed"),
                            ("booking_cancelled", "Booking Cancelled"),
                            ("booking_reminder", "Booking Reminder"),
                            ("booking_overridden", "Booking Overridden"),
                            ("approval_request", "Approval Request"),
                            ("approval_decision", "Approval Decision"),
                            ("maintenance_alert", "Maintenance Alert"),
                            ("conflict_detected", "Conflict Detected"),
                            ("quota_warning", "Quota Warning"),
                            ("waitlist_joined", "Joined Waiting List"),
                            ("waitlist_availability", "Waiting List Slot Available"),
                            ("waitlist_cancelled", "Left Waiting List"),
                            ("access_request_submitted", "Access Request Submitted"),
                            ("access_request_approved", "Access Request Approved"),
                            ("access_request_rejected", "Access Request Rejected"),
                            (
                                "training_request_submitted",
                                "Training Request Submitted",
                            ),
                            ("training_request_scheduled", "Training Scheduled"),
                            ("training_request_completed", "Training Completed"),
                            ("training_request_cancelled", "Training Cancelled"),
                        ],
                        max_length=30,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("message", models.TextField()),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("urgent", "Urgent"),
                        ],
                        default="medium",
                        max_length=10,
                    ),
                ),
                (
                    "delivery_method",
                    models.CharField(
                        choices=[
                            ("email", "Email"),
                            ("sms", "SMS"),
                            ("in_app", "In-App"),
                            ("push", "Push Notification"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("sent", "Sent"),
                            ("failed", "Failed"),
                            ("read", "Read"),
                        ],
                        default="pending",
                        max_length=10,
                    ),
                ),
                ("metadata", models.JSONField(blank=True, default=dict)),
                ("sent_at", models.DateTimeField(blank=True, null=True)),
                ("read_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("retry_count", models.PositiveIntegerField(default=0)),
                ("max_retries", models.PositiveIntegerField(default=3)),
                ("next_retry_at", models.DateTimeField(blank=True, null=True)),
                (
                    "access_request",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="booking.accessrequest",
                    ),
                ),
                (
                    "booking",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="booking.booking",
                    ),
                ),
                (
                    "maintenance",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="booking.maintenance",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "resource",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="booking.resource",
                    ),
                ),
                (
                    "training_request",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="booking.trainingrequest",
                    ),
                ),
            ],
            options={
                "db_table": "booking_notification",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Tutorial",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "target_roles",
                    models.JSONField(
                        default=list, help_text="User roles this tutorial applies to"
                    ),
                ),
                (
                    "target_pages",
                    models.JSONField(
                        default=list,
                        help_text="Pages where this tutorial can be triggered",
                    ),
                ),
                (
                    "trigger_type",
                    models.CharField(
                        choices=[
                            ("manual", "Manual Start"),
                            ("first_login", "First Login"),
                            ("role_change", "Role Change"),
                            ("page_visit", "Page Visit"),
                            ("feature_access", "Feature Access"),
                        ],
                        default="manual",
                        max_length=20,
                    ),
                ),
                (
                    "difficulty_level",
                    models.CharField(
                        choices=[
                            ("beginner", "Beginner"),
                            ("intermediate", "Intermediate"),
                            ("advanced", "Advanced"),
                        ],
                        default="beginner",
                        max_length=20,
                    ),
                ),
                (
                    "estimated_duration",
                    models.PositiveIntegerField(
                        help_text="Estimated duration in minutes"
                    ),
                ),
                (
                    "steps",
                    models.JSONField(
                        default=list, help_text="Tutorial steps configuration"
                    ),
                ),
                (
                    "is_mandatory",
                    models.BooleanField(
                        default=False,
                        help_text="Whether users must complete this tutorial",
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "auto_start",
                    models.BooleanField(
                        default=False, help_text="Auto-start when conditions are met"
                    ),
                ),
                (
                    "allow_skip",
                    models.BooleanField(
                        default=True, help_text="Allow users to skip this tutorial"
                    ),
                ),
                (
                    "show_progress",
                    models.BooleanField(
                        default=True, help_text="Show progress indicator"
                    ),
                ),
                ("version", models.CharField(default="1.0", max_length=10)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_tutorials",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tutorials",
                        to="booking.tutorialcategory",
                    ),
                ),
            ],
            options={
                "db_table": "booking_tutorial",
                "ordering": ["category__order", "name"],
            },
        ),
        migrations.CreateModel(
            name="TutorialAnalytics",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("total_starts", models.PositiveIntegerField(default=0)),
                ("total_completions", models.PositiveIntegerField(default=0)),
                ("total_skips", models.PositiveIntegerField(default=0)),
                ("total_abandons", models.PositiveIntegerField(default=0)),
                (
                    "average_completion_time",
                    models.PositiveIntegerField(
                        default=0, help_text="Average completion time in seconds"
                    ),
                ),
                (
                    "average_rating",
                    models.FloatField(default=0.0, help_text="Average user rating"),
                ),
                (
                    "step_completion_rates",
                    models.JSONField(
                        default=dict, help_text="Completion rate for each step"
                    ),
                ),
                (
                    "step_drop_off_points",
                    models.JSONField(
                        default=list, help_text="Steps where users commonly drop off"
                    ),
                ),
                ("last_calculated_at", models.DateTimeField(auto_now=True)),
                (
                    "tutorial",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="analytics",
                        to="booking.tutorial",
                    ),
                ),
            ],
            options={
                "db_table": "booking_tutorialanalytics",
            },
        ),
        migrations.CreateModel(
            name="UsageAnalytics",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField()),
                ("total_bookings", models.PositiveIntegerField(default=0)),
                ("completed_bookings", models.PositiveIntegerField(default=0)),
                ("no_show_bookings", models.PositiveIntegerField(default=0)),
                ("cancelled_bookings", models.PositiveIntegerField(default=0)),
                ("total_booked_minutes", models.PositiveIntegerField(default=0)),
                ("total_actual_minutes", models.PositiveIntegerField(default=0)),
                ("total_wasted_minutes", models.PositiveIntegerField(default=0)),
                (
                    "utilization_rate",
                    models.FloatField(
                        default=0.0, help_text="Actual usage / Total available time"
                    ),
                ),
                (
                    "efficiency_rate",
                    models.FloatField(
                        default=0.0, help_text="Actual usage / Booked time"
                    ),
                ),
                (
                    "no_show_rate",
                    models.FloatField(
                        default=0.0, help_text="No shows / Total bookings"
                    ),
                ),
                ("avg_early_checkin_minutes", models.FloatField(default=0.0)),
                ("avg_late_checkin_minutes", models.FloatField(default=0.0)),
                ("avg_early_checkout_minutes", models.FloatField(default=0.0)),
                ("avg_late_checkout_minutes", models.FloatField(default=0.0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "resource",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="usage_analytics",
                        to="booking.resource",
                    ),
                ),
            ],
            options={
                "db_table": "booking_usageanalytics",
                "ordering": ["-date"],
            },
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("student", "Student"),
                            ("researcher", "Researcher"),
                            ("academic", "Academic"),
                            ("technician", "Technician"),
                            ("sysadmin", "System Administrator"),
                        ],
                        default="student",
                        max_length=20,
                    ),
                ),
                (
                    "group",
                    models.CharField(
                        blank=True, help_text="Research group or class", max_length=100
                    ),
                ),
                (
                    "student_id",
                    models.CharField(
                        blank=True,
                        help_text="Student ID number",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "student_level",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("undergraduate", "Undergraduate"),
                            ("postgraduate", "Postgraduate"),
                        ],
                        help_text="Academic level (for students only)",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "staff_number",
                    models.CharField(
                        blank=True,
                        help_text="Staff ID number",
                        max_length=50,
                        null=True,
                    ),
                ),
                ("phone", models.CharField(blank=True, max_length=20)),
                ("training_level", models.PositiveIntegerField(default=1)),
                ("is_inducted", models.BooleanField(default=False)),
                ("email_verified", models.BooleanField(default=False)),
                (
                    "first_login",
                    models.DateTimeField(
                        blank=True,
                        help_text="Timestamp of user's first login",
                        null=True,
                    ),
                ),
                (
                    "timezone",
                    models.CharField(
                        default="UTC",
                        help_text="User's preferred timezone",
                        max_length=50,
                    ),
                ),
                (
                    "date_format",
                    models.CharField(
                        choices=[
                            ("DD/MM/YYYY", "DD/MM/YYYY (European)"),
                            ("MM/DD/YYYY", "MM/DD/YYYY (US)"),
                            ("YYYY-MM-DD", "YYYY-MM-DD (ISO)"),
                            ("DD-MM-YYYY", "DD-MM-YYYY"),
                            ("DD.MM.YYYY", "DD.MM.YYYY (German)"),
                        ],
                        default="DD/MM/YYYY",
                        help_text="Preferred date format",
                        max_length=20,
                    ),
                ),
                (
                    "time_format",
                    models.CharField(
                        choices=[
                            ("24h", "24-hour (13:30)"),
                            ("12h", "12-hour (1:30 PM)"),
                        ],
                        default="24h",
                        help_text="Preferred time format",
                        max_length=10,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "college",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="booking.college",
                    ),
                ),
                (
                    "department",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="booking.department",
                    ),
                ),
                (
                    "faculty",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="booking.faculty",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "booking_userprofile",
            },
        ),
        migrations.CreateModel(
            name="UserRiskAssessment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("not_started", "Not Started"),
                            ("in_progress", "In Progress"),
                            ("submitted", "Submitted for Review"),
                            ("approved", "Approved"),
                            ("rejected", "Rejected"),
                            ("expired", "Expired"),
                        ],
                        default="not_started",
                        max_length=20,
                    ),
                ),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("submitted_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("expires_at", models.DateTimeField(blank=True, null=True)),
                (
                    "responses",
                    models.JSONField(
                        default=dict, help_text="User responses to assessment questions"
                    ),
                ),
                (
                    "assessor_notes",
                    models.TextField(
                        blank=True,
                        help_text="Notes from the person reviewing the assessment",
                    ),
                ),
                (
                    "user_declaration",
                    models.TextField(
                        blank=True, help_text="User declaration and acknowledgment"
                    ),
                ),
                ("reviewed_at", models.DateTimeField(blank=True, null=True)),
                ("review_notes", models.TextField(blank=True)),
                (
                    "score_percentage",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                (
                    "pass_threshold",
                    models.DecimalField(decimal_places=2, default=80.0, max_digits=5),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "reviewed_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="reviewed_assessments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "risk_assessment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_completions",
                        to="booking.riskassessment",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="risk_assessments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "booking_userriskassessment",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="UserTraining",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("enrolled", "Enrolled"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("expired", "Expired"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="enrolled",
                        max_length=20,
                    ),
                ),
                ("enrolled_at", models.DateTimeField(auto_now_add=True)),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("expires_at", models.DateTimeField(blank=True, null=True)),
                ("session_date", models.DateTimeField(blank=True, null=True)),
                ("session_location", models.CharField(blank=True, max_length=200)),
                (
                    "theory_score",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                (
                    "practical_score",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                (
                    "overall_score",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                ("passed", models.BooleanField(default=False)),
                ("instructor_notes", models.TextField(blank=True)),
                ("user_feedback", models.TextField(blank=True)),
                (
                    "certificate_number",
                    models.CharField(blank=True, max_length=100, unique=True),
                ),
                ("certificate_issued_at", models.DateTimeField(blank=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "instructor",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="taught_training",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "training_course",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_completions",
                        to="booking.trainingcourse",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="training_records",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "booking_usertraining",
                "ordering": ["-completed_at", "-enrolled_at"],
            },
        ),
        migrations.CreateModel(
            name="UserTutorialProgress",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("not_started", "Not Started"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("skipped", "Skipped"),
                            ("abandoned", "Abandoned"),
                        ],
                        default="not_started",
                        max_length=20,
                    ),
                ),
                ("current_step", models.PositiveIntegerField(default=0)),
                (
                    "completed_steps",
                    models.JSONField(
                        default=list, help_text="List of completed step indices"
                    ),
                ),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("last_accessed_at", models.DateTimeField(auto_now=True)),
                (
                    "time_spent",
                    models.PositiveIntegerField(
                        default=0, help_text="Time spent in seconds"
                    ),
                ),
                (
                    "attempts",
                    models.PositiveIntegerField(
                        default=0, help_text="Number of times tutorial was started"
                    ),
                ),
                (
                    "rating",
                    models.PositiveIntegerField(
                        blank=True, help_text="User rating 1-5", null=True
                    ),
                ),
                ("feedback", models.TextField(blank=True, help_text="User feedback")),
                (
                    "tutorial",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_progress",
                        to="booking.tutorial",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tutorial_progress",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "booking_usertutorialprogress",
                "ordering": ["-last_accessed_at"],
            },
        ),
        migrations.CreateModel(
            name="WaitingListEntry",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "desired_start_time",
                    models.DateTimeField(help_text="Preferred start time"),
                ),
                (
                    "desired_end_time",
                    models.DateTimeField(help_text="Preferred end time"),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Proposed booking title", max_length=200
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Proposed booking description"
                    ),
                ),
                (
                    "flexible_start",
                    models.BooleanField(
                        default=False, help_text="Can start at different time"
                    ),
                ),
                (
                    "flexible_duration",
                    models.BooleanField(
                        default=False, help_text="Can use shorter duration"
                    ),
                ),
                (
                    "min_duration_minutes",
                    models.PositiveIntegerField(
                        default=60, help_text="Minimum acceptable duration in minutes"
                    ),
                ),
                (
                    "max_wait_days",
                    models.PositiveIntegerField(
                        default=7, help_text="Maximum days willing to wait"
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("normal", "Normal"),
                            ("high", "High"),
                            ("urgent", "Urgent"),
                        ],
                        default="normal",
                        max_length=10,
                    ),
                ),
                (
                    "auto_book",
                    models.BooleanField(
                        default=False,
                        help_text="Automatically book when slot becomes available",
                    ),
                ),
                (
                    "notification_hours_ahead",
                    models.PositiveIntegerField(
                        default=24, help_text="Hours ahead to notify of availability"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("waiting", "Waiting"),
                            ("notified", "Notified of Availability"),
                            ("booked", "Successfully Booked"),
                            ("expired", "Expired"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="waiting",
                        max_length=20,
                    ),
                ),
                (
                    "position",
                    models.PositiveIntegerField(
                        default=1, help_text="Position in waiting list"
                    ),
                ),
                ("times_notified", models.PositiveIntegerField(default=0)),
                ("last_notification_sent", models.DateTimeField(blank=True, null=True)),
                (
                    "availability_window_start",
                    models.DateTimeField(
                        blank=True, help_text="When slot became available", null=True
                    ),
                ),
                (
                    "availability_window_end",
                    models.DateTimeField(
                        blank=True, help_text="Until when slot is available", null=True
                    ),
                ),
                (
                    "response_deadline",
                    models.DateTimeField(
                        blank=True,
                        help_text="Deadline to respond to availability",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "expires_at",
                    models.DateTimeField(
                        blank=True, help_text="When this entry expires", null=True
                    ),
                ),
                (
                    "resource",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="waiting_list_entries",
                        to="booking.resource",
                    ),
                ),
                (
                    "resulting_booking",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="waiting_list_entry",
                        to="booking.booking",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="waiting_list_entries",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "booking_waitinglistentry",
                "ordering": ["priority", "position", "created_at"],
            },
        ),
        migrations.CreateModel(
            name="WaitingListNotification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("available_start_time", models.DateTimeField()),
                ("available_end_time", models.DateTimeField()),
                ("sent_at", models.DateTimeField(auto_now_add=True)),
                ("expires_at", models.DateTimeField()),
                ("response_deadline", models.DateTimeField()),
                (
                    "user_response",
                    models.CharField(
                        choices=[
                            ("pending", "Pending Response"),
                            ("accepted", "Accepted"),
                            ("declined", "Declined"),
                            ("expired", "Response Expired"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("responded_at", models.DateTimeField(blank=True, null=True)),
                (
                    "booking_created",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="booking.booking",
                    ),
                ),
                (
                    "waiting_list_entry",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notifications",
                        to="booking.waitinglistentry",
                    ),
                ),
            ],
            options={
                "db_table": "booking_waitinglistnotification",
                "ordering": ["-sent_at"],
            },
        ),
        migrations.CreateModel(
            name="CheckInOutEvent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            ("check_in", "Check In"),
                            ("check_out", "Check Out"),
                            ("no_show", "No Show"),
                            ("auto_check_out", "Auto Check Out"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(help_text="When the event occurred"),
                ),
                (
                    "actual_time",
                    models.DateTimeField(
                        blank=True,
                        help_text="Actual start/end time if different from timestamp",
                        null=True,
                    ),
                ),
                ("notes", models.TextField(blank=True)),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("user_agent", models.TextField(blank=True)),
                (
                    "location_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="GPS or location data if available",
                    ),
                ),
                (
                    "booking",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="checkin_events",
                        to="booking.booking",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User who performed the action",
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "booking_checkinoutevent",
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(
                        fields=["booking", "event_type"],
                        name="booking_che_booking_4dd74d_idx",
                    ),
                    models.Index(
                        fields=["timestamp"], name="booking_che_timesta_4e0618_idx"
                    ),
                    models.Index(
                        fields=["user", "timestamp"],
                        name="booking_che_user_id_5e0148_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="ChecklistResponse",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "text_response",
                    models.TextField(blank=True, help_text="Text/textarea responses"),
                ),
                (
                    "number_response",
                    models.FloatField(
                        blank=True, help_text="Number responses", null=True
                    ),
                ),
                (
                    "boolean_response",
                    models.BooleanField(
                        blank=True, help_text="Checkbox responses", null=True
                    ),
                ),
                (
                    "select_response",
                    models.CharField(
                        blank=True, help_text="Selected option", max_length=200
                    ),
                ),
                ("completed_at", models.DateTimeField(auto_now_add=True)),
                (
                    "is_valid",
                    models.BooleanField(
                        default=True, help_text="Whether the response passes validation"
                    ),
                ),
                (
                    "validation_notes",
                    models.TextField(
                        blank=True, help_text="Notes about validation issues"
                    ),
                ),
                (
                    "booking",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="checklist_responses",
                        to="booking.booking",
                    ),
                ),
                (
                    "checklist_item",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="responses",
                        to="booking.checklistitem",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "booking_checklistresponse",
                "ordering": ["-completed_at"],
                "unique_together": {("booking", "checklist_item")},
            },
        ),
        migrations.AlterUniqueTogether(
            name="college",
            unique_together={("faculty", "code"), ("faculty", "name")},
        ),
        migrations.CreateModel(
            name="LicenseValidationLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "validation_type",
                    models.CharField(
                        choices=[
                            ("startup", "Application Startup"),
                            ("periodic", "Periodic Check"),
                            ("feature_access", "Feature Access"),
                            ("admin_manual", "Manual Admin Check"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "result",
                    models.CharField(
                        choices=[
                            ("success", "Validation Successful"),
                            ("expired", "License Expired"),
                            ("invalid_key", "Invalid License Key"),
                            ("domain_mismatch", "Domain Not Allowed"),
                            ("usage_exceeded", "Usage Limits Exceeded"),
                            ("network_error", "Network/Server Error"),
                            ("not_found", "License Not Found"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "domain_checked",
                    models.CharField(
                        blank=True,
                        help_text="Domain that was validated",
                        max_length=255,
                    ),
                ),
                (
                    "user_agent",
                    models.TextField(blank=True, help_text="Browser/client user agent"),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        blank=True,
                        help_text="IP address of validation request",
                        null=True,
                    ),
                ),
                (
                    "error_message",
                    models.TextField(
                        blank=True, help_text="Error message if validation failed"
                    ),
                ),
                (
                    "response_time",
                    models.FloatField(
                        blank=True,
                        help_text="Validation response time in seconds",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "license",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="validation_logs",
                        to="booking.licenseconfiguration",
                    ),
                ),
            ],
            options={
                "verbose_name": "License Validation Log",
                "verbose_name_plural": "License Validation Logs",
                "db_table": "booking_licensevalidationlog",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["license", "-created_at"],
                        name="booking_lic_license_39b396_idx",
                    ),
                    models.Index(
                        fields=["result", "-created_at"],
                        name="booking_lic_result_e7952e_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="NotificationPreference",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "notification_type",
                    models.CharField(
                        choices=[
                            ("booking_confirmed", "Booking Confirmed"),
                            ("booking_cancelled", "Booking Cancelled"),
                            ("booking_reminder", "Booking Reminder"),
                            ("booking_overridden", "Booking Overridden"),
                            ("approval_request", "Approval Request"),
                            ("approval_decision", "Approval Decision"),
                            ("maintenance_alert", "Maintenance Alert"),
                            ("conflict_detected", "Conflict Detected"),
                            ("quota_warning", "Quota Warning"),
                            ("waitlist_joined", "Joined Waiting List"),
                            ("waitlist_availability", "Waiting List Slot Available"),
                            ("waitlist_cancelled", "Left Waiting List"),
                            ("access_request_submitted", "Access Request Submitted"),
                            ("access_request_approved", "Access Request Approved"),
                            ("access_request_rejected", "Access Request Rejected"),
                            (
                                "training_request_submitted",
                                "Training Request Submitted",
                            ),
                            ("training_request_scheduled", "Training Scheduled"),
                            ("training_request_completed", "Training Completed"),
                            ("training_request_cancelled", "Training Cancelled"),
                        ],
                        max_length=30,
                    ),
                ),
                (
                    "delivery_method",
                    models.CharField(
                        choices=[
                            ("email", "Email"),
                            ("sms", "SMS"),
                            ("in_app", "In-App"),
                            ("push", "Push Notification"),
                        ],
                        max_length=20,
                    ),
                ),
                ("is_enabled", models.BooleanField(default=True)),
                (
                    "frequency",
                    models.CharField(
                        choices=[
                            ("immediate", "Immediate"),
                            ("daily_digest", "Daily Digest"),
                            ("weekly_digest", "Weekly Digest"),
                        ],
                        default="immediate",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notification_preferences",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "booking_notificationpreference",
                "unique_together": {("user", "notification_type", "delivery_method")},
            },
        ),
        migrations.CreateModel(
            name="PushSubscription",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("endpoint", models.URLField(max_length=500)),
                (
                    "p256dh_key",
                    models.CharField(
                        help_text="Public key for encryption", max_length=100
                    ),
                ),
                (
                    "auth_key",
                    models.CharField(help_text="Authentication secret", max_length=50),
                ),
                (
                    "user_agent",
                    models.CharField(
                        blank=True, help_text="Browser/device info", max_length=200
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("last_used", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="push_subscriptions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "booking_pushsubscription",
                "unique_together": {("user", "endpoint")},
            },
        ),
        migrations.CreateModel(
            name="MaintenanceAlert",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "alert_type",
                    models.CharField(
                        choices=[
                            ("due", "Maintenance Due"),
                            ("overdue", "Maintenance Overdue"),
                            ("cost_overrun", "Cost Overrun"),
                            ("vendor_performance", "Vendor Performance Issue"),
                            ("pattern_anomaly", "Usage Pattern Anomaly"),
                            ("predictive", "Predictive Alert"),
                            ("compliance", "Compliance Reminder"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("info", "Information"),
                            ("warning", "Warning"),
                            ("critical", "Critical"),
                            ("urgent", "Urgent"),
                        ],
                        default="info",
                        max_length=10,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("message", models.TextField()),
                (
                    "recommendation",
                    models.TextField(blank=True, help_text="Recommended action"),
                ),
                (
                    "alert_data",
                    models.JSONField(
                        default=dict, help_text="Additional alert context"
                    ),
                ),
                (
                    "threshold_value",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "actual_value",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("acknowledged_at", models.DateTimeField(blank=True, null=True)),
                ("resolved_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("expires_at", models.DateTimeField(blank=True, null=True)),
                (
                    "acknowledged_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "maintenance",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="alerts",
                        to="booking.maintenance",
                    ),
                ),
                (
                    "resource",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="maintenance_alerts",
                        to="booking.resource",
                    ),
                ),
            ],
            options={
                "db_table": "booking_maintenancealert",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["resource", "is_active"],
                        name="booking_mai_resourc_dfa984_idx",
                    ),
                    models.Index(
                        fields=["alert_type", "severity"],
                        name="booking_mai_alert_t_1f5b64_idx",
                    ),
                ],
            },
        ),
        migrations.AddConstraint(
            model_name="maintenance",
            constraint=models.CheckConstraint(
                check=models.Q(("end_time__gt", models.F("start_time"))),
                name="maintenance_end_after_start",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="bookingtemplate",
            unique_together={("user", "name")},
        ),
        migrations.AddConstraint(
            model_name="booking",
            constraint=models.CheckConstraint(
                check=models.Q(("end_time__gt", models.F("start_time"))),
                name="booking_end_after_start",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="approvalstatistics",
            unique_together={("resource", "approver", "period_start", "period_type")},
        ),
        migrations.AlterUniqueTogether(
            name="accessrequest",
            unique_together={("resource", "user", "status")},
        ),
        migrations.AlterUniqueTogether(
            name="resourceaccess",
            unique_together={("resource", "user")},
        ),
        migrations.AlterUniqueTogether(
            name="resourcechecklistitem",
            unique_together={("resource", "checklist_item")},
        ),
        migrations.AddIndex(
            model_name="resourceissue",
            index=models.Index(
                fields=["resource", "status"], name="booking_res_resourc_685c84_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="resourceissue",
            index=models.Index(
                fields=["status", "-created_at"], name="booking_res_status_c8fa3e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="resourceissue",
            index=models.Index(
                fields=["severity", "-created_at"],
                name="booking_res_severit_15a50f_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="resourceissue",
            index=models.Index(
                fields=["assigned_to", "status"], name="booking_res_assigne_ec5a95_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="resourceresponsible",
            unique_together={("resource", "user", "role_type")},
        ),
        migrations.AlterUniqueTogether(
            name="resourcetrainingrequirement",
            unique_together={("resource", "training_course")},
        ),
        migrations.AlterUniqueTogether(
            name="trainingrequest",
            unique_together={("user", "resource", "status")},
        ),
        migrations.AddIndex(
            model_name="notification",
            index=models.Index(
                fields=["user", "status"], name="booking_not_user_id_c1f7ef_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="notification",
            index=models.Index(
                fields=["notification_type", "status"],
                name="booking_not_notific_699f4b_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="notification",
            index=models.Index(
                fields=["created_at"], name="booking_not_created_e8b12c_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="usageanalytics",
            unique_together={("resource", "date")},
        ),
        migrations.AlterUniqueTogether(
            name="userriskassessment",
            unique_together={("user", "risk_assessment", "status")},
        ),
        migrations.AlterUniqueTogether(
            name="usertraining",
            unique_together={("user", "training_course", "status")},
        ),
        migrations.AlterUniqueTogether(
            name="usertutorialprogress",
            unique_together={("user", "tutorial")},
        ),
        migrations.AddIndex(
            model_name="waitinglistentry",
            index=models.Index(
                fields=["resource", "status"], name="booking_wai_resourc_a500ad_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="waitinglistentry",
            index=models.Index(
                fields=["user", "status"], name="booking_wai_user_id_641ea8_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="waitinglistentry",
            index=models.Index(
                fields=["priority", "position"], name="booking_wai_priorit_14bfd8_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="waitinglistentry",
            index=models.Index(
                fields=["desired_start_time"], name="booking_wai_desired_c44fe0_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="waitinglistentry",
            index=models.Index(
                fields=["expires_at"], name="booking_wai_expires_814285_idx"
            ),
        ),
    ]
