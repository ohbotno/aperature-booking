# Generated by Django 5.2.3 on 2025-06-20 21:45

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("booking", "0031_auto_20250620_2045"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="ChecklistItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Title/question for this checklist item",
                        max_length=200,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Detailed description or instructions"
                    ),
                ),
                (
                    "item_type",
                    models.CharField(
                        choices=[
                            ("checkbox", "Checkbox (Yes/No)"),
                            ("text", "Text Input"),
                            ("textarea", "Long Text"),
                            ("number", "Number Input"),
                            ("date", "Date Input"),
                            ("time", "Time Input"),
                            ("select", "Multiple Choice"),
                            ("photo", "Photo Upload"),
                            ("signature", "Digital Signature"),
                            ("rating", "Rating Scale (1-5)"),
                            ("temperature", "Temperature Reading"),
                            ("pressure", "Pressure Reading"),
                            ("voltage", "Voltage Reading"),
                            ("inspection", "Visual Inspection"),
                        ],
                        default="checkbox",
                        max_length=20,
                    ),
                ),
                (
                    "is_required",
                    models.BooleanField(
                        default=True, help_text="Whether this item must be completed"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this item is currently active"
                    ),
                ),
                (
                    "order",
                    models.IntegerField(
                        default=0, help_text="Display order within the checklist"
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low Priority"),
                            ("normal", "Normal Priority"),
                            ("high", "High Priority"),
                            ("critical", "Critical"),
                        ],
                        default="normal",
                        max_length=20,
                    ),
                ),
                (
                    "options",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Configuration options specific to item type (e.g., choices for select, min/max for number)",
                    ),
                ),
                (
                    "validation_rules",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Validation rules for the item response",
                    ),
                ),
                (
                    "conditional_logic",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Conditions for when this item should be displayed",
                    ),
                ),
                (
                    "help_text",
                    models.TextField(
                        blank=True, help_text="Additional help text for users"
                    ),
                ),
                (
                    "help_image",
                    models.ImageField(
                        blank=True,
                        help_text="Optional image to help explain the item",
                        null=True,
                        upload_to="checklist_help/",
                    ),
                ),
                (
                    "escalation_enabled",
                    models.BooleanField(
                        default=False,
                        help_text="Whether issues with this item should trigger escalation",
                    ),
                ),
                (
                    "escalation_contacts",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="List of contact emails for escalation",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Checklist Item",
                "verbose_name_plural": "Checklist Items",
                "db_table": "checklist_items",
                "ordering": ["template", "order", "id"],
            },
        ),
        migrations.CreateModel(
            name="ChecklistCompletion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "completion_type",
                    models.CharField(
                        choices=[
                            ("checkout", "Equipment Checkout"),
                            ("checkin", "Equipment Check-in"),
                            ("maintenance", "Maintenance Check"),
                            ("inspection", "Routine Inspection"),
                        ],
                        default="checkout",
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("not_started", "Not Started"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("approved", "Approved"),
                            ("rejected", "Rejected"),
                            ("escalated", "Escalated"),
                            ("expired", "Expired"),
                        ],
                        default="not_started",
                        max_length=20,
                    ),
                ),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("approved_at", models.DateTimeField(blank=True, null=True)),
                (
                    "due_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="When checklist completion is due",
                        null=True,
                    ),
                ),
                (
                    "approval_notes",
                    models.TextField(blank=True, help_text="Notes from approver"),
                ),
                (
                    "has_issues",
                    models.BooleanField(
                        default=False,
                        help_text="Whether any items have reported issues",
                    ),
                ),
                (
                    "issues_summary",
                    models.TextField(
                        blank=True, help_text="Summary of identified issues"
                    ),
                ),
                ("escalation_reason", models.TextField(blank=True)),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("user_agent", models.TextField(blank=True)),
                (
                    "completion_time_seconds",
                    models.IntegerField(
                        blank=True, help_text="Time taken to complete", null=True
                    ),
                ),
                (
                    "user_signature",
                    models.TextField(blank=True, help_text="Digital signature data"),
                ),
                (
                    "supervisor_signature",
                    models.TextField(blank=True, help_text="Supervisor signature data"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "approved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="approved_checklists",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "booking",
                    models.ForeignKey(
                        blank=True,
                        help_text="Associated booking (if applicable)",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="checklist_completions",
                        to="booking.booking",
                    ),
                ),
                (
                    "escalated_to",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="escalated_checklists",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User completing the checklist",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="checklist_completions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Checklist Completion",
                "verbose_name_plural": "Checklist Completions",
                "db_table": "checklist_completions",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ChecklistItemCompletion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "response",
                    models.TextField(
                        blank=True, help_text="User's response to the checklist item"
                    ),
                ),
                (
                    "file_upload",
                    models.FileField(
                        blank=True,
                        help_text="File upload for photo or document items",
                        null=True,
                        upload_to="checklist_responses/",
                    ),
                ),
                (
                    "has_issue",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this item has identified an issue",
                    ),
                ),
                (
                    "issue_description",
                    models.TextField(
                        blank=True, help_text="Description of the identified issue"
                    ),
                ),
                (
                    "issue_severity",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("critical", "Critical"),
                        ],
                        default="low",
                        max_length=20,
                    ),
                ),
                (
                    "issue_resolved",
                    models.BooleanField(
                        default=False, help_text="Whether the issue has been resolved"
                    ),
                ),
                (
                    "resolution_notes",
                    models.TextField(
                        blank=True, help_text="Notes on how the issue was resolved"
                    ),
                ),
                (
                    "is_valid",
                    models.BooleanField(
                        default=True, help_text="Whether the response passes validation"
                    ),
                ),
                (
                    "validation_errors",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="List of validation errors for this response",
                    ),
                ),
                ("completed_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "checklist_completion",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="item_completions",
                        to="booking.checklistcompletion",
                    ),
                ),
                (
                    "checklist_item",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="item_completions",
                        to="booking.checklistitem",
                    ),
                ),
            ],
            options={
                "verbose_name": "Checklist Item Completion",
                "verbose_name_plural": "Checklist Item Completions",
                "db_table": "checklist_item_completions",
                "ordering": ["checklist_completion", "checklist_item__order"],
            },
        ),
        migrations.CreateModel(
            name="ChecklistTemplate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Descriptive name for this checklist template",
                        max_length=200,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Detailed description of when and how to use this checklist",
                    ),
                ),
                (
                    "template_type",
                    models.CharField(
                        choices=[
                            ("checkout", "Checkout Checklist"),
                            ("checkin", "Check-in Checklist"),
                            ("both", "Both Checkout and Check-in"),
                        ],
                        default="both",
                        help_text="When this checklist should be used",
                        max_length=20,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this checklist template is currently active",
                    ),
                ),
                (
                    "is_mandatory",
                    models.BooleanField(
                        default=True,
                        help_text="Whether completing this checklist is required",
                    ),
                ),
                (
                    "approval_required",
                    models.CharField(
                        choices=[
                            ("none", "No Approval Required"),
                            ("user", "User Sign-off Only"),
                            ("supervisor", "Supervisor Approval Required"),
                            ("manager", "Manager Approval Required"),
                        ],
                        default="user",
                        help_text="Level of approval required for checklist completion",
                        max_length=20,
                    ),
                ),
                (
                    "version",
                    models.IntegerField(
                        default=1, help_text="Version number for tracking changes"
                    ),
                ),
                (
                    "effective_date",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="When this template becomes effective",
                    ),
                ),
                (
                    "expiry_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="When this template expires (optional)",
                        null=True,
                    ),
                ),
                (
                    "conditional_logic",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="JSON configuration for conditional item display based on previous answers",
                    ),
                ),
                (
                    "time_limit_minutes",
                    models.IntegerField(
                        blank=True,
                        help_text="Maximum time allowed to complete checklist (in minutes)",
                        null=True,
                    ),
                ),
                (
                    "reminder_enabled",
                    models.BooleanField(
                        default=True,
                        help_text="Send reminders for incomplete checklists",
                    ),
                ),
                (
                    "reminder_interval_hours",
                    models.IntegerField(
                        default=24, help_text="Hours between reminder notifications"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_checklist_templates",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "resource",
                    models.ForeignKey(
                        help_text="Resource this checklist applies to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="checklist_templates",
                        to="booking.resource",
                    ),
                ),
            ],
            options={
                "verbose_name": "Checklist Template",
                "verbose_name_plural": "Checklist Templates",
                "db_table": "checklist_templates",
                "ordering": ["resource__name", "name"],
            },
        ),
        migrations.AddField(
            model_name="checklistitem",
            name="template",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="checklist_items",
                to="booking.checklisttemplate",
            ),
        ),
        migrations.AddField(
            model_name="checklistcompletion",
            name="template",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="checklist_completions",
                to="booking.checklisttemplate",
            ),
        ),
        migrations.CreateModel(
            name="ResourceUtilizationTrend",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "period_type",
                    models.CharField(
                        choices=[
                            ("hourly", "Hourly"),
                            ("daily", "Daily"),
                            ("weekly", "Weekly"),
                            ("monthly", "Monthly"),
                            ("quarterly", "Quarterly"),
                            ("yearly", "Yearly"),
                        ],
                        help_text="Time period granularity for this trend data",
                        max_length=20,
                    ),
                ),
                (
                    "period_start",
                    models.DateTimeField(
                        help_text="Start of the time period for this data point"
                    ),
                ),
                (
                    "period_end",
                    models.DateTimeField(
                        help_text="End of the time period for this data point"
                    ),
                ),
                (
                    "total_available_hours",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Total hours the resource was available for booking",
                        max_digits=10,
                    ),
                ),
                (
                    "total_booked_hours",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Total hours actually booked",
                        max_digits=10,
                    ),
                ),
                (
                    "total_used_hours",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Total hours actually used (based on check-in/check-out)",
                        max_digits=10,
                    ),
                ),
                (
                    "utilization_rate",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Percentage of available time that was booked (0-100)",
                        max_digits=5,
                    ),
                ),
                (
                    "actual_usage_rate",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Percentage of booked time that was actually used (0-100)",
                        max_digits=5,
                    ),
                ),
                (
                    "total_bookings",
                    models.PositiveIntegerField(
                        default=0, help_text="Total number of bookings in this period"
                    ),
                ),
                (
                    "unique_users",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of unique users who booked this resource",
                    ),
                ),
                (
                    "average_booking_duration",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Average duration of bookings in hours",
                        max_digits=8,
                    ),
                ),
                (
                    "no_show_count",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of bookings where users didn't show up",
                    ),
                ),
                (
                    "no_show_rate",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Percentage of bookings that were no-shows (0-100)",
                        max_digits=5,
                    ),
                ),
                (
                    "peak_hour",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Hour of day with highest utilization (0-23)",
                        null=True,
                    ),
                ),
                (
                    "peak_day",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Day of week with highest utilization (0=Monday, 6=Sunday)",
                        null=True,
                    ),
                ),
                (
                    "peak_utilization",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Highest utilization rate in any sub-period",
                        max_digits=5,
                    ),
                ),
                (
                    "trend_direction",
                    models.CharField(
                        choices=[
                            ("increasing", "Increasing"),
                            ("decreasing", "Decreasing"),
                            ("stable", "Stable"),
                            ("volatile", "Volatile"),
                        ],
                        default="stable",
                        help_text="Overall trend direction compared to previous period",
                        max_length=20,
                    ),
                ),
                (
                    "trend_strength",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Strength of trend (-100 to +100, negative=decreasing)",
                        max_digits=5,
                    ),
                ),
                (
                    "capacity_utilization",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="How much of theoretical maximum capacity was used",
                        max_digits=5,
                    ),
                ),
                (
                    "over_capacity_hours",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Hours when demand exceeded available capacity",
                        max_digits=8,
                    ),
                ),
                (
                    "waiting_list_demand",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Total hours of unfulfilled demand (waiting list entries)",
                        max_digits=8,
                    ),
                ),
                (
                    "user_patterns",
                    models.JSONField(
                        default=dict,
                        help_text="Detailed user behavior patterns and segmentation",
                    ),
                ),
                (
                    "time_patterns",
                    models.JSONField(
                        default=dict, help_text="Detailed time-based usage patterns"
                    ),
                ),
                (
                    "forecast_next_period",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Predicted utilization rate for next period",
                        max_digits=5,
                        null=True,
                    ),
                ),
                (
                    "forecast_confidence",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Confidence level in forecast (0-100)",
                        max_digits=5,
                    ),
                ),
                ("calculated_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "resource",
                    models.ForeignKey(
                        help_text="Resource being analyzed",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="utilization_trends",
                        to="booking.resource",
                    ),
                ),
            ],
            options={
                "db_table": "booking_resourceutilizationtrend",
                "ordering": ["-period_start"],
            },
        ),
        migrations.AddIndex(
            model_name="checklistitemcompletion",
            index=models.Index(
                fields=["checklist_completion", "has_issue"],
                name="checklist_i_checkli_6ce098_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="checklistitemcompletion",
            index=models.Index(
                fields=["checklist_item", "is_valid"],
                name="checklist_i_checkli_3dab5d_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="checklistitemcompletion",
            index=models.Index(
                fields=["issue_severity", "issue_resolved"],
                name="checklist_i_issue_s_fa5fca_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="checklistitemcompletion",
            unique_together={("checklist_completion", "checklist_item")},
        ),
        migrations.AddIndex(
            model_name="checklisttemplate",
            index=models.Index(
                fields=["resource", "template_type", "is_active"],
                name="checklist_t_resourc_f37cfc_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="checklisttemplate",
            index=models.Index(
                fields=["effective_date", "expiry_date"],
                name="checklist_t_effecti_f3c70b_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="checklistitem",
            index=models.Index(
                fields=["template", "is_active", "order"],
                name="checklist_i_templat_aab8f4_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="checklistitem",
            index=models.Index(
                fields=["item_type", "is_required"],
                name="checklist_i_item_ty_cd300a_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="checklistcompletion",
            index=models.Index(
                fields=["template", "status"], name="checklist_c_templat_791fcb_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="checklistcompletion",
            index=models.Index(
                fields=["user", "completion_type"],
                name="checklist_c_user_id_7ac2db_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="checklistcompletion",
            index=models.Index(
                fields=["booking", "status"], name="checklist_c_booking_fdc06b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="checklistcompletion",
            index=models.Index(
                fields=["completed_at", "approved_at"],
                name="checklist_c_complet_c83c18_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="checklistcompletion",
            index=models.Index(
                fields=["has_issues", "status"], name="checklist_c_has_iss_4592e9_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="resourceutilizationtrend",
            index=models.Index(
                fields=["resource", "period_type"],
                name="booking_res_resourc_934d63_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="resourceutilizationtrend",
            index=models.Index(
                fields=["period_start", "period_end"],
                name="booking_res_period__08bb9b_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="resourceutilizationtrend",
            index=models.Index(
                fields=["utilization_rate"], name="booking_res_utiliza_79f012_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="resourceutilizationtrend",
            index=models.Index(
                fields=["trend_direction"], name="booking_res_trend_d_bbd01a_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="resourceutilizationtrend",
            unique_together={("resource", "period_type", "period_start")},
        ),
    ]
