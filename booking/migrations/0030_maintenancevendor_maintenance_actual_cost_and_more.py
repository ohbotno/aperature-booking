# Generated by Django 5.2.3 on 2025-06-18 19:11

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("booking", "0029_tutorialcategory_tutorial_tutorialanalytics_and_more"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="MaintenanceVendor",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("contact_person", models.CharField(blank=True, max_length=100)),
                ("email", models.EmailField(blank=True, max_length=254)),
                ("phone", models.CharField(blank=True, max_length=20)),
                ("address", models.TextField(blank=True)),
                ("website", models.URLField(blank=True)),
                (
                    "specialties",
                    models.JSONField(
                        default=list,
                        help_text="Areas of expertise (e.g., electrical, mechanical)",
                    ),
                ),
                (
                    "certifications",
                    models.JSONField(default=list, help_text="Relevant certifications"),
                ),
                (
                    "service_areas",
                    models.JSONField(
                        default=list, help_text="Geographic service areas"
                    ),
                ),
                (
                    "average_response_time",
                    models.DurationField(
                        blank=True,
                        help_text="Average response time for service calls",
                        null=True,
                    ),
                ),
                (
                    "rating",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Vendor rating (1-5)",
                        max_digits=3,
                        null=True,
                    ),
                ),
                (
                    "hourly_rate",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "emergency_rate",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                ("contract_start_date", models.DateField(blank=True, null=True)),
                ("contract_end_date", models.DateField(blank=True, null=True)),
                ("is_active", models.BooleanField(default=True)),
                ("notes", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "booking_maintenancevendor",
                "ordering": ["name"],
            },
        ),
        migrations.AddField(
            model_name="maintenance",
            name="actual_cost",
            field=models.DecimalField(
                blank=True, decimal_places=2, max_digits=10, null=True
            ),
        ),
        migrations.AddField(
            model_name="maintenance",
            name="affects_other_resources",
            field=models.ManyToManyField(
                blank=True,
                related_name="affected_by_maintenance",
                to="booking.resource",
            ),
        ),
        migrations.AddField(
            model_name="maintenance",
            name="approved_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="approved_maintenances",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="maintenance",
            name="assigned_to",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="assigned_maintenances",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="maintenance",
            name="completed_at",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="maintenance",
            name="completion_notes",
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name="maintenance",
            name="estimated_cost",
            field=models.DecimalField(
                blank=True, decimal_places=2, max_digits=10, null=True
            ),
        ),
        migrations.AddField(
            model_name="maintenance",
            name="is_internal",
            field=models.BooleanField(
                default=True, help_text="Performed by internal staff"
            ),
        ),
        migrations.AddField(
            model_name="maintenance",
            name="issues_found",
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name="maintenance",
            name="labor_hours",
            field=models.DecimalField(
                blank=True, decimal_places=2, max_digits=8, null=True
            ),
        ),
        migrations.AddField(
            model_name="maintenance",
            name="next_maintenance_date",
            field=models.DateTimeField(
                blank=True, help_text="When next maintenance is due", null=True
            ),
        ),
        migrations.AddField(
            model_name="maintenance",
            name="parts_cost",
            field=models.DecimalField(
                blank=True, decimal_places=2, max_digits=10, null=True
            ),
        ),
        migrations.AddField(
            model_name="maintenance",
            name="prerequisite_maintenances",
            field=models.ManyToManyField(
                blank=True,
                related_name="dependent_maintenances",
                to="booking.maintenance",
            ),
        ),
        migrations.AddField(
            model_name="maintenance",
            name="priority",
            field=models.CharField(
                choices=[
                    ("low", "Low"),
                    ("medium", "Medium"),
                    ("high", "High"),
                    ("critical", "Critical"),
                    ("emergency", "Emergency"),
                ],
                default="medium",
                max_length=10,
            ),
        ),
        migrations.AddField(
            model_name="maintenance",
            name="recommendations",
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name="maintenance",
            name="status",
            field=models.CharField(
                choices=[
                    ("scheduled", "Scheduled"),
                    ("in_progress", "In Progress"),
                    ("completed", "Completed"),
                    ("cancelled", "Cancelled"),
                    ("postponed", "Postponed"),
                    ("overdue", "Overdue"),
                ],
                default="scheduled",
                max_length=20,
            ),
        ),
        migrations.AlterField(
            model_name="maintenance",
            name="created_by",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="created_maintenances",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterField(
            model_name="maintenance",
            name="maintenance_type",
            field=models.CharField(
                choices=[
                    ("preventive", "Preventive Maintenance"),
                    ("corrective", "Corrective Maintenance"),
                    ("emergency", "Emergency Repair"),
                    ("calibration", "Calibration"),
                    ("inspection", "Inspection"),
                    ("upgrade", "Upgrade"),
                    ("installation", "Installation"),
                    ("decommission", "Decommission"),
                ],
                default="preventive",
                max_length=20,
            ),
        ),
        migrations.CreateModel(
            name="MaintenanceAlert",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "alert_type",
                    models.CharField(
                        choices=[
                            ("due", "Maintenance Due"),
                            ("overdue", "Maintenance Overdue"),
                            ("cost_overrun", "Cost Overrun"),
                            ("vendor_performance", "Vendor Performance Issue"),
                            ("pattern_anomaly", "Usage Pattern Anomaly"),
                            ("predictive", "Predictive Alert"),
                            ("compliance", "Compliance Reminder"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("info", "Information"),
                            ("warning", "Warning"),
                            ("critical", "Critical"),
                            ("urgent", "Urgent"),
                        ],
                        default="info",
                        max_length=10,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("message", models.TextField()),
                (
                    "recommendation",
                    models.TextField(blank=True, help_text="Recommended action"),
                ),
                (
                    "alert_data",
                    models.JSONField(
                        default=dict, help_text="Additional alert context"
                    ),
                ),
                (
                    "threshold_value",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "actual_value",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("acknowledged_at", models.DateTimeField(blank=True, null=True)),
                ("resolved_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("expires_at", models.DateTimeField(blank=True, null=True)),
                (
                    "acknowledged_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "maintenance",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="alerts",
                        to="booking.maintenance",
                    ),
                ),
                (
                    "resource",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="maintenance_alerts",
                        to="booking.resource",
                    ),
                ),
            ],
            options={
                "db_table": "booking_maintenancealert",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="MaintenanceAnalytics",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "total_maintenance_cost",
                    models.DecimalField(decimal_places=2, default=0, max_digits=15),
                ),
                (
                    "average_maintenance_cost",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                (
                    "preventive_cost_ratio",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Percentage of costs from preventive maintenance",
                        max_digits=5,
                    ),
                ),
                (
                    "total_downtime_hours",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                ("average_repair_time", models.DurationField(blank=True, null=True)),
                (
                    "planned_vs_unplanned_ratio",
                    models.DecimalField(decimal_places=2, default=0, max_digits=5),
                ),
                ("total_maintenance_count", models.PositiveIntegerField(default=0)),
                (
                    "preventive_maintenance_count",
                    models.PositiveIntegerField(default=0),
                ),
                (
                    "corrective_maintenance_count",
                    models.PositiveIntegerField(default=0),
                ),
                ("emergency_maintenance_count", models.PositiveIntegerField(default=0)),
                (
                    "first_time_fix_rate",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Percentage of issues fixed on first attempt",
                        max_digits=5,
                    ),
                ),
                (
                    "mean_time_between_failures",
                    models.DurationField(blank=True, null=True),
                ),
                ("mean_time_to_repair", models.DurationField(blank=True, null=True)),
                (
                    "vendor_performance_score",
                    models.DecimalField(decimal_places=2, default=0, max_digits=5),
                ),
                (
                    "external_maintenance_ratio",
                    models.DecimalField(decimal_places=2, default=0, max_digits=5),
                ),
                (
                    "next_failure_prediction",
                    models.DateTimeField(blank=True, null=True),
                ),
                (
                    "failure_probability",
                    models.DecimalField(decimal_places=2, default=0, max_digits=5),
                ),
                (
                    "recommended_maintenance_interval",
                    models.DurationField(blank=True, null=True),
                ),
                ("last_calculated", models.DateTimeField(auto_now=True)),
                (
                    "resource",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="maintenance_analytics",
                        to="booking.resource",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Maintenance Analytics",
                "db_table": "booking_maintenanceanalytics",
            },
        ),
        migrations.CreateModel(
            name="MaintenanceDocument",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                (
                    "document_type",
                    models.CharField(
                        choices=[
                            ("manual", "Service Manual"),
                            ("checklist", "Maintenance Checklist"),
                            ("invoice", "Invoice/Receipt"),
                            ("report", "Maintenance Report"),
                            ("photo", "Photograph"),
                            ("certificate", "Certificate"),
                            ("warranty", "Warranty Document"),
                            ("other", "Other"),
                        ],
                        default="other",
                        max_length=50,
                    ),
                ),
                ("file", models.FileField(upload_to="maintenance_docs/%Y/%m/")),
                (
                    "file_size",
                    models.PositiveIntegerField(
                        blank=True, help_text="File size in bytes", null=True
                    ),
                ),
                ("uploaded_at", models.DateTimeField(auto_now_add=True)),
                (
                    "tags",
                    models.JSONField(default=list, help_text="Tags for categorization"),
                ),
                (
                    "is_public",
                    models.BooleanField(
                        default=False, help_text="Viewable by all users"
                    ),
                ),
                (
                    "version",
                    models.CharField(
                        blank=True, help_text="Document version", max_length=20
                    ),
                ),
                (
                    "maintenance",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="documents",
                        to="booking.maintenance",
                    ),
                ),
                (
                    "uploaded_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "booking_maintenancedocument",
                "ordering": ["-uploaded_at"],
            },
        ),
        migrations.AddField(
            model_name="maintenance",
            name="vendor",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="maintenances",
                to="booking.maintenancevendor",
            ),
        ),
        migrations.AddConstraint(
            model_name="maintenance",
            constraint=models.CheckConstraint(
                condition=models.Q(("end_time__gt", models.F("start_time"))),
                name="maintenance_end_after_start",
            ),
        ),
        migrations.AddIndex(
            model_name="maintenancealert",
            index=models.Index(
                fields=["resource", "is_active"], name="booking_mai_resourc_dfa984_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="maintenancealert",
            index=models.Index(
                fields=["alert_type", "severity"], name="booking_mai_alert_t_1f5b64_idx"
            ),
        ),
    ]
